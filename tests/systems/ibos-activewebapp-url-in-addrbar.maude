load ../../systems/ibos-sop-pred-nou.maude --- contextual rewriting
load ../../systems/ibos-sop-fvp-noau.maude --- varsat
load ../../systems/ibos-sop-noau.maude     --- everything

set show advisories off .
set print attribute on .
---set print with parentheses on .

load ../../rltool.maude

---@ \/
---@ ({ < ui | toKernel(UIML) >
---@    < display | activeWebapp(none), displayedContent(about-blank) >
---@    < nic | in(mtLL), nic-out(mtLS) >
---@    < webappmgr | nextWPN(NWP) >
---@    < kernel | weblabels(mtWPIS), netlabels(mtNPIS), displayedTopBar(about-blank), handledCurrently(none), nextNPN(0),
---@        msgPolicy(policy(webapp, network,MSG-FETCH-URL ),ps
---@                  policy(ui,     webapp, MSG-NEW-URL   ),ps
---@ 		 policy(ui,     webapp, MSG-SWITCH-TAB),ps
---@ 		 policy(network,webapp, MSG-RETURN-URL)) > }) |
---@    true

--- activeWebapp's id and URL appear in weblabels(), URL appears in displayedTopBar()
--- NOTE: this property has expanded to encompass attributes:
---       display: activeWebapp, displayedContent
---       kernel: displayedTopBar, weblabels
---       webappmgr: nextWAN
--- NOTE: since we are not worried about ids of network processes here, the nextNetworkProc attribute probably doesn't matter
--- NOTE: due to the changeTab rule requiring synchronization between the weblabels attribute and the state of the system, we either need to:
---       [i]  use a recursive (non-FVP) predicate to describe the required relationship (strengthen the invariant + proof subcalculus to reason about it)
---       [ii] strengthen the changeTab rule in our specification by strengthening its condition
--- NOTE: These are not used anymore for
---/\ (in-conf?(W,C))                    = (false)    --- Now process W directly appears in the invariant state
---/\ (webapp-url-render?(W,C))          = ((U,RNDR)) --- This made the RNDR variable free, which causes problems, so now it appears in the state
---/\ (conf-labels-eqset?((C < W | none >) !c,WIS,NIS))           = (true)     --- ensure WIS and C are consistent


(select     IBOS-SOP-NOID .)
(use tool conrew  for validity         on IBOS-SOP-PRED-NOID with FOFORMSIMPLIFY-IMP-IMPL .)
(use tool conrew  for unsatisfiability on IBOS-SOP-PRED-NOID .)
(use tool varunif for varunif          on IBOS-SOP-FVP-NOID  .)

--- Sovled rules:
--- new-url
--- tab-change
--- change-display
--- fetch
--- render

--- Unsovled rules:

(select-rls render .)

(declare-vars (C:Configuration) U (NWC:NetWebProcConfig) U (WIS:WebProcInfoSet) U (NIS:NetProcInfoSet) U (MSG?:Message?) U
              (NNP:Nat) U (NWP:Nat) U (CURR:Label) U (B:Bool) U (B':Bool) U (UIML:MessageList) U
	      (DISP:Label) U (NICIN:LabelList) U (NICOUT:LabelSet) U (NI:ConcNetProcId) U (NI?:NetProcId) U
	      (F:MessageList) U (T:MessageList) U (D:Label) U (L:Bool) U (U:Label) U (U':Label) U (U2:Label) U (IN:Label) U (IN2:Label) U (OUT:Label) U
	      (A:AttributeSet) U (A':AttributeSet) U (A'':AttributeSet) U (MT:MsgType) U (LL:LabelList) U (RNDR:Label) U
	      (NWI:ConcNetWebProcId) U (WI:ConcWebProcId) U (WI':ConcWebProcId) U (PP1:ConcPipeId) U (GPPI:PipeId) .)
(def-term-set ([C:Configuration]) | true .)
(inv abc to '`[_`] on
({ NWC
   < WI | URL(U), rendered(RNDR), A >
   < ui | toKernel(UIML) >
   < display | activeWebapp(WI), displayedContent(DISP) >
   < nic | in(NICIN), nic-out(NICOUT) >
   < webappmgr | nextWPN(NWP) >
   < kernel | weblabels(WIS), netlabels(NIS), displayedTopBar(CURR), handledCurrently(MSG?), nextNPN(NNP),
       msgPolicy(policy(webapp, network,MSG-FETCH-URL ),ps
                 policy(ui,     webapp, MSG-NEW-URL   ),ps
		 policy(ui,     webapp, MSG-SWITCH-TAB),ps
		 policy(network,webapp, MSG-RETURN-URL)) > }) |
   (p(NWC < WI | URL(U), rendered(RNDR), A >,WIS,NIS,MSG?))       = (true)  /\
   (nwp-reqattrs?((NWC < WI | URL(U), rendered(RNDR), A >) !c))   = (true)  /\
   (conf-attr-dupl?((NWC < WI | URL(U), rendered(RNDR), A >) !c)) = (false) /\
   (conf-labels-eqset?(NWC < WI | none >,WIS,NIS))                = (true)  /\
   (weblabels-dupl?(WIS))                                         = (false) /\
   (netlabels-dupl?(NIS))                                         = (false) /\
   (conf-dupl?(NWC < WI | none >))                                = (false) /\
   (fresh-wp-id?(webapp(NWP), NWC < WI | none >))                 = (true)  /\
   (fresh-np-id?(network(NNP),NWC < WI | none >))                 = (true)  /\
   (fresh-weblabel?(webapp(NWP),WIS))                             = (true)  /\
   (fresh-netlabel?(network(NNP),NIS))                            = (true)  /\
   ---
   (netlabels-match?(NIS))                                        = (true)  /\
   (webapp-url-eqset?(NWC < WI | URL(U) >,WIS))                   = (true)  /\
   (weblabel-by-pid(WI,WIS) ~l U)                                 = (true)  /\
   (DISP blank-or-equal RNDR)                                     = (true)  /\
   (U ~l CURR)                                                    = (true)  /\
   (render-consistent?(NWC < WI | URL(U), rendered(RNDR), A >))   = (true)
.)

set print conceal on .
print conceal fmod_is_sorts_.____endfm mod_is_sorts_._____endm _;;_ . --- _;_ _`[_`] . --- _&&_ _|_

(start-proof .)
(auto .)

--- new-url, change-display
--- (auto .)

--- tab-change
--- (split ({ < WI | A > < kernel | weblabels(pi(WI,U),wp pi(WI',U'),wp WIS), A' > C }) by (webapp-url-render(WI',C)) = ((U,RNDR)) and (webapp-url-render(WI',C)) = (nopair) .)
--- (split ({ < WI | URL(U), A > < display | activeWebapp(WI), A' > < kernel | displayedTopBar(U'), A'' > C }) by (U ~l U') = (true) and (U ~l U') = (false) .)
--- (auto .)

--- fetch
--- (split ({ < WI | loading(B), URL(U), A > < kernel | weblabels(WIS), A' > C }) by (weblabel-by-pid(WI,WIS)) = (U) and (weblabel-by-pid(WI,WIS)) = (nolabel) .)
--- (split ({ < WI | A > < WI' | A' > C }) by (WI ~p WI') = (true) and (WI ~p WI') = (false) .)
--- (auto .)

--- (split ({ < W | loading(B), URL(U), A > < kernel | weblabels(WIS), A' > C }) by (weblabel-by-pid(W,WIS)) = (U) and (weblabel-by-pid(W,WIS)) = (nolabel) .)
--- (split ({ < W | A > < W' | A' > C }) by (W ~p W') = (true) and (W ~p W') = (false) .)
--- (auto .)

--- render --- single process
--- (focus 272 -- 279, 284 -- 291 .)
--- (split ({ < WI | loading(true), A > < kernel | weblabels(WIS), A' > C }) by (weblabel-by-pid(WI,WIS)) = (IN) and (weblabel-by-pid(WI,WIS)) = (nolabel) .)
--- (split ({ C }) | (p(< WI | fromKernel(msg(PP1,WI,MSG-RETURN-URL,U) @ F), A > NWC,WIS,NIS,MSG?)) = (true) by (netlabelpair-by-pid(PP1,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(PP1,NIS)) = (nopair) .)
--- (split ({ C }) | (p(< WI | fromKernel(msg(PP1,WI,MSG-RETURN-URL,U)    ), A > NWC,WIS,NIS,MSG?)) = (true) by (netlabelpair-by-pid(PP1,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(PP1,NIS)) = (nopair) .)
--- (split ({ < WI | loading(true), A > < kernel | weblabels(pi(WI,IN),wp WIS), netlabels(pi(NI,IN2,OUT),np NIS), A' > C }) by (IN ~l IN2) = (true) and (IN ~l IN2) = (false) .)
--- (split ({ < WI | loading(true), rendered(U), A > < kernel | netlabels(pi(NI,IN,OUT),np NIS), A' > C }) by (U ~l OUT) = (true) and (U ~l OUT) = (false) .)
--- (split ({ < kernel | netlabels(pi(NI,IN2,OUT),np NIS), A > C }) by (IN2 ~l OUT) = (true) and (IN2 ~l OUT) = (false) .)
--- (split ({ C }) | (render-consistent?(< WI | URL(U), rendered(U'), A > NWC)) = (true) by (U' blank-or-equal U) = (true) and (U' blank-or-equal U) = (false) .)
--- (auto .)

--- render --- multi process
--- (focus 280 -- 283, 292 -- 295 .)
--- (split ({ < WI | loading(true),         A > < kernel | weblabels(             WIS), A' > C }) by (weblabel-by-pid(WI,WIS)) = (IN) and (weblabel-by-pid(WI,WIS)) = (nolabel) .)
--- (split ({ < WI | loading(true), URL(U), A > < kernel | weblabels(pi(WI,IN),wp WIS), A' > C }) by (U ~l IN) = (true) and (U ~l IN) = (false) .)
--- (split ({ C }) | (p(< WI | fromKernel(msg(PP1,WI,MSG-RETURN-URL,U) @ F), A > NWC,WIS,NIS,MSG?)) = (true) by (netlabelpair-by-pid(PP1,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(PP1,NIS)) = (nopair) .)
--- (split ({ C }) | (p(< WI | fromKernel(msg(PP1,WI,MSG-RETURN-URL,U)    ), A > NWC,WIS,NIS,MSG?)) = (true) by (netlabelpair-by-pid(PP1,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(PP1,NIS)) = (nopair) .)
--- (split ({ < WI | loading(true), A > < kernel | weblabels(pi(WI,IN),wp WIS), netlabels(pi(NI,IN2,OUT),np NIS), A' > C }) by (IN ~l IN2) = (true) and (IN ~l IN2) = (false) .)
--- (split ({ < WI | loading(true), rendered(U), A > < kernel | netlabels(pi(NI,IN,OUT),np NIS), A' > C }) by (U ~l OUT) = (true) and (U ~l OUT) = (false) .)
--- (split ({ < kernel | netlabels(pi(NI,IN2,OUT),np NIS), A > C }) by (IN2 ~l OUT) = (true) and (IN2 ~l OUT) = (false) .)
--- (split ({ C }) | (render-consistent?(< WI | URL(U),  rendered(U'), A > < WI' | A' > NWC)) = (true) by (U' blank-or-equal U) = (true) and (U' blank-or-equal U) = (false) .)
--- (split ({ C }) | (render-consistent?(< WI | URL(U),  rendered(U'), A' >             NWC)) = (true) by (U' blank-or-equal U) = (true) and (U' blank-or-equal U) = (false) .)
--- (split ({ < WI | A > < WI' | A' > C }) by (WI ~p WI') = (true) and (WI ~p WI') = (false) .)
--- (auto .)
