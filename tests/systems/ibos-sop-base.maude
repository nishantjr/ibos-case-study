load ../../systems/ibos.maude

--- NOTES:
--- [1] local simplifications in formula structure are unsound when shared variables
---     are present which exist outside of the fragment that are lost --- this is
---     because the information regarding the variables is lost when the constraint
---     is solved --- some possibilities:
---     a. make variables into constants, do reductions, and then lift reduced items
---        into my theory so they can be used in later reduction steps
---     b. do reductions over formula-functor lifted algebras --- here we can express
---        express constraints about variables directly in our rules
---     c. make two copies of the formula --- one non-reduced version and one reduced
---        version --- then be careful to always allow reductions for each goal locally
---        have access to the unreduced parts that were assumed (or something like that)
---     d. record each reduction step so we keep around the set of all true facts that
---        we can assume --- then give our other reductions access to that set
--- [2] because messages may be dynamically added to the list, we need to ensure
---     that the metadata in the kernel WIS/NIS has the correct shape so that when
---     this webapp receives a message of the form that we care about, we know the
---     metadata will look like what we need to complete the proof
--- [3] since the only way the message list can increase is by the rule
---     kernelForwardsOPMessage, it SHOULD be enough to require:
---     a. kernel's currentlyHandled() attribute to be correct
---     b. kernel's message policy is locked down to the minimum necessary
---        (this way we can't instantiate the message policy with weird connections
---         and send MSG-FETCH/RETURN-URLs down those connections) ---
---        thus, we choose the default initial policy:
---        (webapp,network,MSG-FETCH-URL)
---        (network,webapp,MSG-RETURN-URL)
---        (ui,webapp,MSG-SWITCH-TAB)
---        (ui,webapp,MSG-NEW-URL)
---     However, requiring the webapps to always be reflected properly in the
---     kernel metadata just means that we will never have a terminating state
---     where the kernel tried to send a message and could not because no webapp
---     was there to receive it.
---     Also, probably the narrowing time is similar... maybe.
--- [4] if handledCurrently contains some message addressed to non-existent processes,
---     we don't care---that is a weird state, but it doesn't concern us---what concerns
---     us is that if the message is received by a real webapp, then it will satisfy the
---     conditions above

fmod CONFIGURATION-FVP-EXT is
  pr KERNEL-POLICIES-FVP .

  sort NetWebProcId NetWebProcObject NetWebProcConfig NetWebProcNeConfig .
  subsort NetProcId WebProcId < NetWebProcId < PipeId .
  subsort NetWebProcObject < Object .
  subsort NetWebProcObject < NetWebProcNeConfig < NeConfiguration NetWebProcConfig < Configuration .
  subsort EmptyConfiguration < NetWebProcConfig .
  op <_|_> : NetWebProcId AttributeSet -> NetWebProcObject [ctor ditto metadata "33"] .
  op __ : NetWebProcConfig   NetWebProcConfig -> NetWebProcConfig   [ctor ditto metadata "35"] .
  op __ : NetWebProcNeConfig NetWebProcConfig -> NetWebProcNeConfig [ctor ditto metadata "35"] .
endfm

fmod MSG-FVP-EXT is
  pr MSG .
  sort NonRetFetchMsg NonRetMsg NonFetchMsg .
  subsort NonRetFetchMsg < NonRetMsg NonFetchMsg < MsgType .
  op MSG-NEW-URL    : -> NonRetFetchMsg [ctor metadata "45"] .
  op MSG-FETCH-URL  : -> NonRetMsg      [ctor metadata "46"] .
  op MSG-RETURN-URL : -> NonFetchMsg    [ctor metadata "47"] .
  op MSG-SWITCH-TAB : -> NonRetFetchMsg [ctor metadata "48"] .
  ----------------------------------------------------
  eq MSG-RETURN-URL ~m M:NonRetMsg   = false .
  eq MSG-FETCH-URL  ~m M:NonFetchMsg = false .
endfm

fmod KERNEL-METADATA-FVP-EXT is
  pr KERNEL-POLICIES-FVP .
  sort NeWebProcInfoSet .
  subsort WebProcInfo < NeWebProcInfoSet < WebProcInfoSet .
  sort NeNetProcInfoSet .
  subsort NetProcInfo < NeNetProcInfoSet < NetProcInfoSet .
  ---------------------------------------------------------
  op _,wp_ : NeWebProcInfoSet WebProcInfoSet -> NeWebProcInfoSet [ctor ditto metadata "72"] .
  op _,np_ : NeNetProcInfoSet NetProcInfoSet -> NeNetProcInfoSet [ctor ditto metadata "75"] .
endfm

fmod ATTRIBUTE-NONFVP-EXT is
  pr KERNEL-POLICIES-FVP .
  var A A' : Attribute . var AS AS' : AttributeSet .

  op _!a : AttributeSet -> AttributeSet [metadata "100"] .
  eq (fromKernel      (X:MessageList)   , AS) !a = fromKernel(mt)               , (AS !a) .
  eq (toKernel        (X:MessageList)   , AS) !a = toKernel(mt)                 , (AS !a) .
  eq (nextWPN         (X:Nat)           , AS) !a = nextWPN(0)                   , (AS !a) .
  eq (rendered        (X:Label)         , AS) !a = rendered(about-blank)        , (AS !a) .
  eq (URL             (X:Label)         , AS) !a = URL(about-blank)             , (AS !a) .
  eq (loading         (X:Bool)          , AS) !a = loading(true)                , (AS !a) .
  eq (returnTo        (X:PipeId)        , AS) !a = returnTo(ui)                 , (AS !a) .
  eq (in              (X:LabelList)     , AS) !a = in(mtLL)                     , (AS !a) .
  eq (out             (X:LabelList)     , AS) !a = out(mtLL)                    , (AS !a) .
  eq (mem-in          (X:MaybeLabel)    , AS) !a = mem-in(nolabel)              , (AS !a) .
  eq (mem-out         (X:MaybeLabel)    , AS) !a = mem-out(nolabel)             , (AS !a) .
  eq (nic-in          (X:LabelList)     , AS) !a = nic-in(mtLL)                 , (AS !a) .
  eq (nic-out         (X:LabelSet)      , AS) !a = nic-out(mtLS)                , (AS !a) .
  eq (msgPolicy       (X:PolicySet)     , AS) !a = msgPolicy(mtPS)              , (AS !a) .
  eq (nextNPN         (X:Nat)           , AS) !a = nextNPN(0)                   , (AS !a) .
  eq (handledCurrently(X:Message?)      , AS) !a = handledCurrently(none)       , (AS !a) .
  eq (weblabels       (X:WebProcInfoSet), AS) !a = weblabels(mtWPIS)            , (AS !a) .
  eq (netlabels       (X:NetProcInfoSet), AS) !a = netlabels(mtNPIS)            , (AS !a) .
  eq (displayedTopBar (X:Label)         , AS) !a = displayedTopBar(about-blank) , (AS !a) .
  eq (displayedContent(X:Label)         , AS) !a = displayedContent(about-blank), (AS !a) .
  eq (activeWebapp    (X:WebProcId)     , AS) !a = activeWebapp(webapp(0))      , (AS !a) .
  eq none !a = none .

  op _~a_ : Attribute Attribute -> Bool [comm metadata "101"] .
  eq fromKernel      (X:MessageList)    ~a fromKernel      (Y:MessageList)    = true .
  eq toKernel        (X:MessageList)    ~a toKernel        (Y:MessageList)    = true .
  eq nextWPN         (X:Nat)            ~a nextWPN         (Y:Nat)            = true .
  eq rendered        (X:Label)          ~a rendered        (Y:Label)          = true .
  eq URL             (X:Label)          ~a URL             (Y:Label)          = true .
  eq loading         (X:Bool)           ~a loading         (Y:Bool)           = true .
  eq returnTo        (X:PipeId)         ~a returnTo        (Y:PipeId)         = true .
  eq in              (X:LabelList)      ~a in              (Y:LabelList)      = true .
  eq out             (X:LabelList)      ~a out             (Y:LabelList)      = true .
  eq mem-in          (X:MaybeLabel)     ~a mem-in          (Y:MaybeLabel)     = true .
  eq mem-out         (X:MaybeLabel)     ~a mem-out         (Y:MaybeLabel)     = true .
  eq nic-in          (X:LabelList)      ~a nic-in          (Y:LabelList)      = true .
  eq nic-out         (X:LabelSet)       ~a nic-out         (Y:LabelSet)       = true .
  eq msgPolicy       (X:PolicySet)      ~a msgPolicy       (Y:PolicySet)      = true .
  eq nextNPN         (X:Nat)            ~a nextNPN         (Y:Nat)            = true .
  eq handledCurrently(X:Message?)       ~a handledCurrently(Y:Message?)       = true .
  eq weblabels       (X:WebProcInfoSet) ~a weblabels       (Y:WebProcInfoSet) = true .
  eq netlabels       (X:NetProcInfoSet) ~a netlabels       (Y:NetProcInfoSet) = true .
  eq displayedTopBar (X:Label)          ~a displayedTopBar (Y:Label)          = true .
  eq displayedContent(X:Label)          ~a displayedContent(Y:Label)          = true .
  eq activeWebapp    (X:WebProcId)      ~a activeWebapp    (Y:WebProcId)      = true .

  eq fromKernel      (X:MessageList)    ~a toKernel        (Y:MessageList)    = false .
  eq fromKernel      (X:MessageList)    ~a nextWPN         (Y:Nat)            = false .
  eq fromKernel      (X:MessageList)    ~a rendered        (Y:Label)          = false .
  eq fromKernel      (X:MessageList)    ~a URL             (Y:Label)          = false .
  eq fromKernel      (X:MessageList)    ~a loading         (Y:Bool)           = false .
  eq fromKernel      (X:MessageList)    ~a returnTo        (Y:PipeId)         = false .
  eq fromKernel      (X:MessageList)    ~a in              (Y:LabelList)      = false .
  eq fromKernel      (X:MessageList)    ~a out             (Y:LabelList)      = false .
  eq fromKernel      (X:MessageList)    ~a mem-in          (Y:MaybeLabel)     = false .
  eq fromKernel      (X:MessageList)    ~a mem-out         (Y:MaybeLabel)     = false .
  eq fromKernel      (X:MessageList)    ~a nic-in          (Y:LabelList)      = false .
  eq fromKernel      (X:MessageList)    ~a nic-out         (Y:LabelSet)       = false .
  eq fromKernel      (X:MessageList)    ~a msgPolicy       (Y:PolicySet)      = false .
  eq fromKernel      (X:MessageList)    ~a nextNPN         (Y:Nat)            = false .
  eq fromKernel      (X:MessageList)    ~a handledCurrently(Y:Message?)       = false .
  eq fromKernel      (X:MessageList)    ~a weblabels       (Y:WebProcInfoSet) = false .
  eq fromKernel      (X:MessageList)    ~a netlabels       (Y:NetProcInfoSet) = false .
  eq fromKernel      (X:MessageList)    ~a displayedTopBar (Y:Label)          = false .
  eq fromKernel      (X:MessageList)    ~a displayedContent(Y:Label)          = false .
  eq fromKernel      (X:MessageList)    ~a activeWebapp    (Y:WebProcId)      = false .

  eq toKernel        (X:MessageList)    ~a nextWPN         (Y:Nat)            = false .
  eq toKernel        (X:MessageList)    ~a rendered        (Y:Label)          = false .
  eq toKernel        (X:MessageList)    ~a URL             (Y:Label)          = false .
  eq toKernel        (X:MessageList)    ~a loading         (Y:Bool)           = false .
  eq toKernel        (X:MessageList)    ~a returnTo        (Y:PipeId)         = false .
  eq toKernel        (X:MessageList)    ~a in              (Y:LabelList)      = false .
  eq toKernel        (X:MessageList)    ~a out             (Y:LabelList)      = false .
  eq toKernel        (X:MessageList)    ~a mem-in          (Y:MaybeLabel)     = false .
  eq toKernel        (X:MessageList)    ~a mem-out         (Y:MaybeLabel)     = false .
  eq toKernel        (X:MessageList)    ~a nic-in          (Y:LabelList)      = false .
  eq toKernel        (X:MessageList)    ~a nic-out         (Y:LabelSet)       = false .
  eq toKernel        (X:MessageList)    ~a msgPolicy       (Y:PolicySet)      = false .
  eq toKernel        (X:MessageList)    ~a nextNPN         (Y:Nat)            = false .
  eq toKernel        (X:MessageList)    ~a handledCurrently(Y:Message?)       = false .
  eq toKernel        (X:MessageList)    ~a weblabels       (Y:WebProcInfoSet) = false .
  eq toKernel        (X:MessageList)    ~a netlabels       (Y:NetProcInfoSet) = false .
  eq toKernel        (X:MessageList)    ~a displayedTopBar (Y:Label)          = false .
  eq toKernel        (X:MessageList)    ~a displayedContent(Y:Label)          = false .
  eq toKernel        (X:MessageList)    ~a activeWebapp    (Y:WebProcId)      = false .

  eq nextWPN         (X:Nat)            ~a rendered        (Y:Label)          = false .
  eq nextWPN         (X:Nat)            ~a URL             (Y:Label)          = false .
  eq nextWPN         (X:Nat)            ~a loading         (Y:Bool)           = false .
  eq nextWPN         (X:Nat)            ~a returnTo        (Y:PipeId)         = false .
  eq nextWPN         (X:Nat)            ~a in              (Y:LabelList)      = false .
  eq nextWPN         (X:Nat)            ~a out             (Y:LabelList)      = false .
  eq nextWPN         (X:Nat)            ~a mem-in          (Y:MaybeLabel)     = false .
  eq nextWPN         (X:Nat)            ~a mem-out         (Y:MaybeLabel)     = false .
  eq nextWPN         (X:Nat)            ~a nic-in          (Y:LabelList)      = false .
  eq nextWPN         (X:Nat)            ~a nic-out         (Y:LabelSet)       = false .
  eq nextWPN         (X:Nat)            ~a msgPolicy       (Y:PolicySet)      = false .
  eq nextWPN         (X:Nat)            ~a nextNPN         (Y:Nat)            = false .
  eq nextWPN         (X:Nat)            ~a handledCurrently(Y:Message?)       = false .
  eq nextWPN         (X:Nat)            ~a weblabels       (Y:WebProcInfoSet) = false .
  eq nextWPN         (X:Nat)            ~a netlabels       (Y:NetProcInfoSet) = false .
  eq nextWPN         (X:Nat)            ~a displayedTopBar (Y:Label)          = false .
  eq nextWPN         (X:Nat)            ~a displayedContent(Y:Label)          = false .
  eq nextWPN         (X:Nat)            ~a activeWebapp    (Y:WebProcId)      = false .

  eq rendered        (X:Label)          ~a URL             (Y:Label)          = false .
  eq rendered        (X:Label)          ~a loading         (Y:Bool)           = false .
  eq rendered        (X:Label)          ~a returnTo        (Y:PipeId)         = false .
  eq rendered        (X:Label)          ~a in              (Y:LabelList)      = false .
  eq rendered        (X:Label)          ~a out             (Y:LabelList)      = false .
  eq rendered        (X:Label)          ~a mem-in          (Y:MaybeLabel)     = false .
  eq rendered        (X:Label)          ~a mem-out         (Y:MaybeLabel)     = false .
  eq rendered        (X:Label)          ~a nic-in          (Y:LabelList)      = false .
  eq rendered        (X:Label)          ~a nic-out         (Y:LabelSet)       = false .
  eq rendered        (X:Label)          ~a msgPolicy       (Y:PolicySet)      = false .
  eq rendered        (X:Label)          ~a nextNPN         (Y:Nat)            = false .
  eq rendered        (X:Label)          ~a handledCurrently(Y:Message?)       = false .
  eq rendered        (X:Label)          ~a weblabels       (Y:WebProcInfoSet) = false .
  eq rendered        (X:Label)          ~a netlabels       (Y:NetProcInfoSet) = false .
  eq rendered        (X:Label)          ~a displayedTopBar (Y:Label)          = false .
  eq rendered        (X:Label)          ~a displayedContent(Y:Label)          = false .
  eq rendered        (X:Label)          ~a activeWebapp    (Y:WebProcId)      = false .

  eq URL             (X:Label)          ~a loading         (Y:Bool)           = false .
  eq URL             (X:Label)          ~a returnTo        (Y:PipeId)         = false .
  eq URL             (X:Label)          ~a in              (Y:LabelList)      = false .
  eq URL             (X:Label)          ~a out             (Y:LabelList)      = false .
  eq URL             (X:Label)          ~a mem-in          (Y:MaybeLabel)     = false .
  eq URL             (X:Label)          ~a mem-out         (Y:MaybeLabel)     = false .
  eq URL             (X:Label)          ~a nic-in          (Y:LabelList)      = false .
  eq URL             (X:Label)          ~a nic-out         (Y:LabelSet)       = false .
  eq URL             (X:Label)          ~a msgPolicy       (Y:PolicySet)      = false .
  eq URL             (X:Label)          ~a nextNPN         (Y:Nat)            = false .
  eq URL             (X:Label)          ~a handledCurrently(Y:Message?)       = false .
  eq URL             (X:Label)          ~a weblabels       (Y:WebProcInfoSet) = false .
  eq URL             (X:Label)          ~a netlabels       (Y:NetProcInfoSet) = false .
  eq URL             (X:Label)          ~a displayedTopBar (Y:Label)          = false .
  eq URL             (X:Label)          ~a displayedContent(Y:Label)          = false .
  eq URL             (X:Label)          ~a activeWebapp    (Y:WebProcId)      = false .

  eq loading         (X:Bool)           ~a returnTo        (Y:PipeId)         = false .
  eq loading         (X:Bool)           ~a in              (Y:LabelList)      = false .
  eq loading         (X:Bool)           ~a out             (Y:LabelList)      = false .
  eq loading         (X:Bool)           ~a mem-in          (Y:MaybeLabel)     = false .
  eq loading         (X:Bool)           ~a mem-out         (Y:MaybeLabel)     = false .
  eq loading         (X:Bool)           ~a nic-in          (Y:LabelList)      = false .
  eq loading         (X:Bool)           ~a nic-out         (Y:LabelSet)       = false .
  eq loading         (X:Bool)           ~a msgPolicy       (Y:PolicySet)      = false .
  eq loading         (X:Bool)           ~a nextNPN         (Y:Nat)            = false .
  eq loading         (X:Bool)           ~a handledCurrently(Y:Message?)       = false .
  eq loading         (X:Bool)           ~a weblabels       (Y:WebProcInfoSet) = false .
  eq loading         (X:Bool)           ~a netlabels       (Y:NetProcInfoSet) = false .
  eq loading         (X:Bool)           ~a displayedTopBar (Y:Label)          = false .
  eq loading         (X:Bool)           ~a displayedContent(Y:Label)          = false .
  eq loading         (X:Bool)           ~a activeWebapp    (Y:WebProcId)      = false .

  eq returnTo        (X:PipeId)         ~a in              (Y:LabelList)      = false .
  eq returnTo        (X:PipeId)         ~a out             (Y:LabelList)      = false .
  eq returnTo        (X:PipeId)         ~a mem-in          (Y:MaybeLabel)     = false .
  eq returnTo        (X:PipeId)         ~a mem-out         (Y:MaybeLabel)     = false .
  eq returnTo        (X:PipeId)         ~a nic-in          (Y:LabelList)      = false .
  eq returnTo        (X:PipeId)         ~a nic-out         (Y:LabelSet)       = false .
  eq returnTo        (X:PipeId)         ~a msgPolicy       (Y:PolicySet)      = false .
  eq returnTo        (X:PipeId)         ~a nextNPN         (Y:Nat)            = false .
  eq returnTo        (X:PipeId)         ~a handledCurrently(Y:Message?)       = false .
  eq returnTo        (X:PipeId)         ~a weblabels       (Y:WebProcInfoSet) = false .
  eq returnTo        (X:PipeId)         ~a netlabels       (Y:NetProcInfoSet) = false .
  eq returnTo        (X:PipeId)         ~a displayedTopBar (Y:Label)          = false .
  eq returnTo        (X:PipeId)         ~a displayedContent(Y:Label)          = false .
  eq returnTo        (X:PipeId)         ~a activeWebapp    (Y:WebProcId)      = false .

  eq in              (X:LabelList)      ~a out             (Y:LabelList)      = false .
  eq in              (X:LabelList)      ~a mem-in          (Y:MaybeLabel)     = false .
  eq in              (X:LabelList)      ~a mem-out         (Y:MaybeLabel)     = false .
  eq in              (X:LabelList)      ~a nic-in          (Y:LabelList)      = false .
  eq in              (X:LabelList)      ~a nic-out         (Y:LabelSet)       = false .
  eq in              (X:LabelList)      ~a msgPolicy       (Y:PolicySet)      = false .
  eq in              (X:LabelList)      ~a nextNPN         (Y:Nat)            = false .
  eq in              (X:LabelList)      ~a handledCurrently(Y:Message?)       = false .
  eq in              (X:LabelList)      ~a weblabels       (Y:WebProcInfoSet) = false .
  eq in              (X:LabelList)      ~a netlabels       (Y:NetProcInfoSet) = false .
  eq in              (X:LabelList)      ~a displayedTopBar (Y:Label)          = false .
  eq in              (X:LabelList)      ~a displayedContent(Y:Label)          = false .
  eq in              (X:LabelList)      ~a activeWebapp    (Y:WebProcId)      = false .

  eq out             (X:LabelList)      ~a mem-in          (Y:MaybeLabel)     = false .
  eq out             (X:LabelList)      ~a mem-out         (Y:MaybeLabel)     = false .
  eq out             (X:LabelList)      ~a nic-in          (Y:LabelList)      = false .
  eq out             (X:LabelList)      ~a nic-out         (Y:LabelSet)       = false .
  eq out             (X:LabelList)      ~a msgPolicy       (Y:PolicySet)      = false .
  eq out             (X:LabelList)      ~a nextNPN         (Y:Nat)            = false .
  eq out             (X:LabelList)      ~a handledCurrently(Y:Message?)       = false .
  eq out             (X:LabelList)      ~a weblabels       (Y:WebProcInfoSet) = false .
  eq out             (X:LabelList)      ~a netlabels       (Y:NetProcInfoSet) = false .
  eq out             (X:LabelList)      ~a displayedTopBar (Y:Label)          = false .
  eq out             (X:LabelList)      ~a displayedContent(Y:Label)          = false .
  eq out             (X:LabelList)      ~a activeWebapp    (Y:WebProcId)      = false .

  eq mem-in          (X:MaybeLabel)     ~a mem-out         (Y:MaybeLabel)     = false .
  eq mem-in          (X:MaybeLabel)     ~a nic-in          (Y:LabelList)      = false .
  eq mem-in          (X:MaybeLabel)     ~a nic-out         (Y:LabelSet)       = false .
  eq mem-in          (X:MaybeLabel)     ~a msgPolicy       (Y:PolicySet)      = false .
  eq mem-in          (X:MaybeLabel)     ~a nextNPN         (Y:Nat)            = false .
  eq mem-in          (X:MaybeLabel)     ~a handledCurrently(Y:Message?)       = false .
  eq mem-in          (X:MaybeLabel)     ~a weblabels       (Y:WebProcInfoSet) = false .
  eq mem-in          (X:MaybeLabel)     ~a netlabels       (Y:NetProcInfoSet) = false .
  eq mem-in          (X:MaybeLabel)     ~a displayedTopBar (Y:Label)          = false .
  eq mem-in          (X:MaybeLabel)     ~a displayedContent(Y:Label)          = false .
  eq mem-in          (X:MaybeLabel)     ~a activeWebapp    (Y:WebProcId)      = false .

  eq mem-out         (X:MaybeLabel)     ~a nic-in          (Y:LabelList)      = false .
  eq mem-out         (X:MaybeLabel)     ~a nic-out         (Y:LabelSet)       = false .
  eq mem-out         (X:MaybeLabel)     ~a msgPolicy       (Y:PolicySet)      = false .
  eq mem-out         (X:MaybeLabel)     ~a nextNPN         (Y:Nat)            = false .
  eq mem-out         (X:MaybeLabel)     ~a handledCurrently(Y:Message?)       = false .
  eq mem-out         (X:MaybeLabel)     ~a weblabels       (Y:WebProcInfoSet) = false .
  eq mem-out         (X:MaybeLabel)     ~a netlabels       (Y:NetProcInfoSet) = false .
  eq mem-out         (X:MaybeLabel)     ~a displayedTopBar (Y:Label)          = false .
  eq mem-out         (X:MaybeLabel)     ~a displayedContent(Y:Label)          = false .
  eq mem-out         (X:MaybeLabel)     ~a activeWebapp    (Y:WebProcId)      = false .

  eq nic-in          (X:LabelList)      ~a nic-out         (Y:LabelSet)       = false .
  eq nic-in          (X:LabelList)      ~a msgPolicy       (Y:PolicySet)      = false .
  eq nic-in          (X:LabelList)      ~a nextNPN         (Y:Nat)            = false .
  eq nic-in          (X:LabelList)      ~a handledCurrently(Y:Message?)       = false .
  eq nic-in          (X:LabelList)      ~a weblabels       (Y:WebProcInfoSet) = false .
  eq nic-in          (X:LabelList)      ~a netlabels       (Y:NetProcInfoSet) = false .
  eq nic-in          (X:LabelList)      ~a displayedTopBar (Y:Label)          = false .
  eq nic-in          (X:LabelList)      ~a displayedContent(Y:Label)          = false .
  eq nic-in          (X:LabelList)      ~a activeWebapp    (Y:WebProcId)      = false .

  eq nic-out         (X:LabelSet)       ~a msgPolicy       (Y:PolicySet)      = false .
  eq nic-out         (X:LabelSet)       ~a nextNPN         (Y:Nat)            = false .
  eq nic-out         (X:LabelSet)       ~a handledCurrently(Y:Message?)       = false .
  eq nic-out         (X:LabelSet)       ~a weblabels       (Y:WebProcInfoSet) = false .
  eq nic-out         (X:LabelSet)       ~a netlabels       (Y:NetProcInfoSet) = false .
  eq nic-out         (X:LabelSet)       ~a displayedTopBar (Y:Label)          = false .
  eq nic-out         (X:LabelSet)       ~a displayedContent(Y:Label)          = false .
  eq nic-out         (X:LabelSet)       ~a activeWebapp    (Y:WebProcId)      = false .

  eq msgPolicy       (X:PolicySet)      ~a nextNPN         (Y:Nat)            = false .
  eq msgPolicy       (X:PolicySet)      ~a handledCurrently(Y:Message?)       = false .
  eq msgPolicy       (X:PolicySet)      ~a weblabels       (Y:WebProcInfoSet) = false .
  eq msgPolicy       (X:PolicySet)      ~a netlabels       (Y:NetProcInfoSet) = false .
  eq msgPolicy       (X:PolicySet)      ~a displayedTopBar (Y:Label)          = false .
  eq msgPolicy       (X:PolicySet)      ~a displayedContent(Y:Label)          = false .
  eq msgPolicy       (X:PolicySet)      ~a activeWebapp    (Y:WebProcId)      = false .

  eq nextNPN         (X:Nat)            ~a handledCurrently(Y:Message?)       = false .
  eq nextNPN         (X:Nat)            ~a weblabels       (Y:WebProcInfoSet) = false .
  eq nextNPN         (X:Nat)            ~a netlabels       (Y:NetProcInfoSet) = false .
  eq nextNPN         (X:Nat)            ~a displayedTopBar (Y:Label)          = false .
  eq nextNPN         (X:Nat)            ~a displayedContent(Y:Label)          = false .
  eq nextNPN         (X:Nat)            ~a activeWebapp    (Y:WebProcId)      = false .

  eq handledCurrently(X:Message?)       ~a weblabels       (Y:WebProcInfoSet) = false .
  eq handledCurrently(X:Message?)       ~a netlabels       (Y:NetProcInfoSet) = false .
  eq handledCurrently(X:Message?)       ~a displayedTopBar (Y:Label)          = false .
  eq handledCurrently(X:Message?)       ~a displayedContent(Y:Label)          = false .
  eq handledCurrently(X:Message?)       ~a activeWebapp    (Y:WebProcId)      = false .

  eq weblabels       (X:WebProcInfoSet) ~a netlabels       (Y:NetProcInfoSet) = false .
  eq weblabels       (X:WebProcInfoSet) ~a displayedTopBar (Y:Label)          = false .
  eq weblabels       (X:WebProcInfoSet) ~a displayedContent(Y:Label)          = false .
  eq weblabels       (X:WebProcInfoSet) ~a activeWebapp    (Y:WebProcId)      = false .

  eq netlabels       (X:NetProcInfoSet) ~a displayedTopBar (Y:Label)          = false .
  eq netlabels       (X:NetProcInfoSet) ~a displayedContent(Y:Label)          = false .
  eq netlabels       (X:NetProcInfoSet) ~a activeWebapp    (Y:WebProcId)      = false .

  eq displayedTopBar (X:Label)          ~a displayedContent(Y:Label)          = false .
  eq displayedTopBar (X:Label)          ~a activeWebapp    (Y:WebProcId)      = false .

  eq displayedContent(X:Label)          ~a activeWebapp    (Y:WebProcId)      = false .

  op in-attrset?(_|_) : Attribute AttributeSet -> Bool [metadata "102"] .
  eq in-attrset?(fromKernel      (X:MessageList)    | (fromKernel      (Y:MessageList),    AS)) = true .
  eq in-attrset?(toKernel        (X:MessageList)    | (toKernel        (Y:MessageList),    AS)) = true .
  eq in-attrset?(nextWPN         (X:Nat)            | (nextWPN         (Y:Nat),            AS)) = true .
  eq in-attrset?(rendered        (X:Label)          | (rendered        (Y:Label),          AS)) = true .
  eq in-attrset?(URL             (X:Label)          | (URL             (Y:Label),          AS)) = true .
  eq in-attrset?(loading         (X:Bool)           | (loading         (Y:Bool),           AS)) = true .
  eq in-attrset?(returnTo        (X:PipeId)         | (returnTo        (Y:PipeId),         AS)) = true .
  eq in-attrset?(in              (X:LabelList)      | (in              (Y:LabelList),      AS)) = true .
  eq in-attrset?(out             (X:LabelList)      | (out             (Y:LabelList),      AS)) = true .
  eq in-attrset?(mem-in          (X:MaybeLabel)     | (mem-in          (Y:MaybeLabel),     AS)) = true .
  eq in-attrset?(mem-out         (X:MaybeLabel)     | (mem-out         (Y:MaybeLabel),     AS)) = true .
  eq in-attrset?(nic-in          (X:LabelList)      | (nic-in          (Y:LabelList),      AS)) = true .
  eq in-attrset?(nic-out         (X:LabelSet)       | (nic-out         (Y:LabelSet),       AS)) = true .
  eq in-attrset?(msgPolicy       (X:PolicySet)      | (msgPolicy       (Y:PolicySet),      AS)) = true .
  eq in-attrset?(nextNPN         (X:Nat)            | (nextNPN         (Y:Nat),            AS)) = true .
  eq in-attrset?(handledCurrently(X:Message?)       | (handledCurrently(Y:Message?),       AS)) = true .
  eq in-attrset?(weblabels       (X:WebProcInfoSet) | (weblabels       (Y:WebProcInfoSet), AS)) = true .
  eq in-attrset?(netlabels       (X:NetProcInfoSet) | (netlabels       (Y:NetProcInfoSet), AS)) = true .
  eq in-attrset?(displayedTopBar (X:Label)          | (displayedTopBar (Y:Label),          AS)) = true .
  eq in-attrset?(displayedContent(X:Label)          | (displayedContent(Y:Label),          AS)) = true .
  eq in-attrset?(activeWebapp    (X:WebProcId)      | (activeWebapp    (Y:WebProcId),      AS)) = true .
  eq in-attrset?(A | none) = false .
 ceq in-attrset?(A | A', AS) = in-attrset?(A | AS) if A ~a A' = false .

  op attr-dupl? : AttributeSet -> Bool [metadata "103"] .
  eq attr-dupl?(fromKernel      (X:MessageList),    fromKernel      (Y:MessageList),    AS) = true .
  eq attr-dupl?(toKernel        (X:MessageList),    toKernel        (Y:MessageList),    AS) = true .
  eq attr-dupl?(nextWPN         (X:Nat),            nextWPN         (Y:Nat),            AS) = true .
  eq attr-dupl?(rendered        (X:Label),          rendered        (Y:Label),          AS) = true .
  eq attr-dupl?(URL             (X:Label),          URL             (Y:Label),          AS) = true .
  eq attr-dupl?(loading         (X:Bool),           loading         (Y:Bool),           AS) = true .
  eq attr-dupl?(returnTo        (X:PipeId),         returnTo        (Y:PipeId),         AS) = true .
  eq attr-dupl?(in              (X:LabelList),      in              (Y:LabelList),      AS) = true .
  eq attr-dupl?(out             (X:LabelList),      out             (Y:LabelList),      AS) = true .
  eq attr-dupl?(mem-in          (X:MaybeLabel),     mem-in          (Y:MaybeLabel),     AS) = true .
  eq attr-dupl?(mem-out         (X:MaybeLabel),     mem-out         (Y:MaybeLabel),     AS) = true .
  eq attr-dupl?(nic-in          (X:LabelList),      nic-in          (Y:LabelList),      AS) = true .
  eq attr-dupl?(nic-out         (X:LabelSet),       nic-out         (Y:LabelSet),       AS) = true .
  eq attr-dupl?(msgPolicy       (X:PolicySet),      msgPolicy       (Y:PolicySet),      AS) = true .
  eq attr-dupl?(nextNPN         (X:Nat),            nextNPN         (Y:Nat),            AS) = true .
  eq attr-dupl?(handledCurrently(X:Message?),       handledCurrently(Y:Message?),       AS) = true .
  eq attr-dupl?(weblabels       (X:WebProcInfoSet), weblabels       (Y:WebProcInfoSet), AS) = true .
  eq attr-dupl?(netlabels       (X:NetProcInfoSet), netlabels       (Y:NetProcInfoSet), AS) = true .
  eq attr-dupl?(displayedTopBar (X:Label),          displayedTopBar (Y:Label),          AS) = true .
  eq attr-dupl?(displayedContent(X:Label),          displayedContent(Y:Label),          AS) = true .
  eq attr-dupl?(activeWebapp    (X:WebProcId),      activeWebapp    (Y:WebProcId),      AS) = true .
  eq attr-dupl?(A) = false .
 ceq attr-dupl?(A,AS) = attr-dupl?(AS) if in-attrset?(A | AS) = false .

  op attr-subset?(_|_) : AttributeSet AttributeSet -> Bool [metadata "104"] .
 ceq attr-subset?(A, AS | AS') = attr-subset?(AS | AS') if in-attrset?(A | AS') .
 ceq attr-subset?(A, AS | AS') = false                  if in-attrset?(A | AS') = false .
  eq attr-subset?(none  | AS') = true .
endfm

fmod KERNEL-POLICIES-NONFVP-EXT is
  pr KERNEL-POLICIES-NONFVP .
  pr CONFIGURATION-FVP-EXT .
  pr MSG-FVP-EXT .
  pr ATTRIBUTE-NONFVP-EXT .
  pr KERNEL-METADATA-FVP-EXT .

  var C : Configuration .
  var W N M : Nat .
  var P : NzNat .
  var At At' : Attribute .
  var A A' : AttributeSet .
  var NA : NeAttributeSet .
  var NNPI : NonNetProcId .
  var NWAI : NonWebProcId .
  var PI PI' : ProcessId .
  var NPI NPI' : NetProcId .
  var WAI WAI' : WebProcId .
  var MSGL : MessageList .
  var L L' L1 L2 IN OUT : Label .
  var NIS : NetProcInfoSet .
  var WIS : WebProcInfoSet .
  var NWIS : NeWebProcInfoSet .
  var NNIS : NeNetProcInfoSet .
  var NonPID : NonPipeId .

  --- Configuration predicates
  op _!c : Configuration -> Configuration [metadata "105"] .
  eq (< PI | A > C) !c = < PI | A !a > (C !c) .
  eq none           !c = none .

  op in-conf? : ProcessId Configuration -> Bool [metadata "106"] .
  eq in-conf?(PI,< PI  | A' > C) = true .
 ceq in-conf?(PI,< PI' | A' > C) = in-conf?(PI,C) if PI ~p PI' = false .
  eq in-conf?(PI,none)           = false .

  op conf-dupl? : Configuration -> Bool [metadata "107"] .
  eq conf-dupl?(< PI | A  > < PI | A' > C) = true .
  eq conf-dupl?(< PI | NA >             C) = conf-dupl?(< PI | none > C) .
  eq conf-dupl?(none) = false .
 ceq conf-dupl?(< PI | none > C) = conf-dupl?(C) if in-conf?(PI,C) = false .

  op fresh-np-id? : NetProcId Configuration -> Bool [metadata "108"] .
  eq fresh-np-id?(network(N    ), < network(N + M) | A > C) = false .
  eq fresh-np-id?(network(N + P), < network(N)     | A > C) = fresh-np-id?(network(N + P),C) .
  eq fresh-np-id?(network(N    ), < network        | A > C) = fresh-np-id?(network(N),C) .
  eq fresh-np-id?(network(N    ), < NNPI           | A > C) = fresh-np-id?(network(N),C) .
  eq fresh-np-id?(network(N    ), none                    ) = true .
  eq fresh-np-id?(network(M    ), < NPI           | NA > C) = fresh-np-id?(network(M), < NPI | none > C) .
 ceq fresh-np-id?(network(N + 1),                        C) = true if fresh-np-id?(network(N),C) .

  op fresh-wp-id? : WebProcId Configuration -> Bool [metadata "109"] .
  eq fresh-wp-id?(webapp(N    ), < webapp(N + M) | A > C) = false .
  eq fresh-wp-id?(webapp(N + P), < webapp(N)     | A > C) = fresh-wp-id?(webapp(N + P),C) .
  eq fresh-wp-id?(webapp(N    ), < webapp        | A > C) = fresh-wp-id?(webapp(N),C) .
  eq fresh-wp-id?(webapp(N    ), < NWAI          | A > C) = fresh-wp-id?(webapp(N),C) .
  eq fresh-wp-id?(webapp(N    ), none                   ) = true .
  eq fresh-wp-id?(webapp(M    ), < WAI          | NA > C) = fresh-wp-id?(webapp(M), < WAI | none > C) .
 ceq fresh-wp-id?(webapp(N + 1),                       C) = true if fresh-wp-id?(webapp(N),C) .

  op conf-attr-dupl? : Configuration -> Bool [metadata "110"] .
 ceq conf-attr-dupl?(< PI | At, At', A > C) = conf-attr-dupl?(< PI | A        > C) if At ~a At' = false .
  eq conf-attr-dupl?(< PI | At         > C) = conf-attr-dupl?(                  C) .
  eq conf-attr-dupl?(< PI | none       > C) = conf-attr-dupl?(                  C) .
 ceq conf-attr-dupl?(< PI |          A > C) = true                                 if attr-dupl?(A) .
  eq conf-attr-dupl?(none)                  = false .

  --- NB: above predicate with attribute canonicalization applied first
  op conf-attr-dupl!? : Configuration -> Bool [metadata "111"] .
  eq conf-attr-dupl!?(C) = conf-attr-dupl?(C !c) .

  op nwp-reqattrs? : NetWebProcConfig -> Bool [metadata "112"] .
  eq nwp-reqattrs?(< NPI | toKernel(TK:MessageList), fromKernel(FK:MessageList), returnTo(P:PipeId), mem-in(M1:MaybeLabel), mem-out(M2:MaybeLabel), A > C)
   = nwp-reqattrs?(C) .
  eq nwp-reqattrs?(< WAI | toKernel(TK:MessageList), fromKernel(FK:MessageList), URL(L1:Label), rendered(L2:Label), loading(B:Bool), A > C)
   = nwp-reqattrs?(C) .
 ceq nwp-reqattrs?(< NPI | A > C) = false if attr-subset?(toKernel(mt),fromKernel(mt),returnTo(ui),mem-in(nolabel),mem-out(nolabel)        | A) = false .
 ceq nwp-reqattrs?(< WAI | A > C) = false if attr-subset?(toKernel(mt),fromKernel(mt),URL(about-blank),rendered(about-blank),loading(true) | A) = false .
  eq nwp-reqattrs?(none) = true .

  --- NB: above predicate with attribute canonicalization applied first
  op nwp-reqattrs!? : NetWebProcConfig -> Bool [metadata "113"] .
  eq nwp-reqattrs!?(C) = nwp-reqattrs?(C !c) .

  --- needed for metadata-match?
  op netproc-in-conf? : Configuration -> Bool [metadata "114"] .
  eq netproc-in-conf?(< NPI  | A > C) = true .
  eq netproc-in-conf?(< NNPI | A > C) = netproc-in-conf?(C) .
  eq netproc-in-conf?(none)           = false .

  op webproc-url-in-conf? : Configuration -> Bool [metadata "115"] .
  eq webproc-url-in-conf?(< WAI  | URL(L), A > C) = true .
 ceq webproc-url-in-conf?(< WAI  |         A > C) = webproc-url-in-conf?(C) if in-attrset?(URL(about-blank) | A) = false .
  eq webproc-url-in-conf?(< NWAI |         A > C) = webproc-url-in-conf?(C) .
  eq webproc-url-in-conf?(none)                   = false .

  op webproc-url-netproc-in-conf? : Configuration -> Bool [metadata "116"] .
  eq webproc-url-netproc-in-conf?(< WAI | URL(L), A > < NPI | A' > C) = true .
 ceq webproc-url-netproc-in-conf?(                                 C) = false if webproc-url-in-conf?(C) = false .
 ceq webproc-url-netproc-in-conf?(                                 C) = false if netproc-in-conf?(C) = false .

  --- Web/NetProcInfoSet predicates
  op inlbl-by-pid : NetProcId NetProcInfoSet -> MaybeLabel [metadata "117"] .
  eq inlbl-by-pid(NPI,(pi(NPI, IN,OUT),np NIS)) = IN .
 ceq inlbl-by-pid(NPI,(pi(NPI',IN,OUT),np NIS)) = inlbl-by-pid(NPI,NIS) if NPI ~p NPI' = false .
  eq inlbl-by-pid(NPI,mtNPIS)                   = nolabel .

  op outlbl-by-pid : NetProcId NetProcInfoSet -> MaybeLabel [metadata "118"] .
  eq outlbl-by-pid(NPI,(pi(NPI, IN,OUT),np NIS)) = OUT .
 ceq outlbl-by-pid(NPI,(pi(NPI',IN,OUT),np NIS)) = outlbl-by-pid(NPI,NIS) if NPI ~p NPI' = false .
  eq outlbl-by-pid(NPI,mtNPIS)                   = nolabel .

  op nat-in-netlabels? : Nat NetProcInfoSet -> Bool [metadata "119"] .
  eq nat-in-netlabels?(N,(pi(network(N),IN,OUT) ,np NIS)) = true [variant] .
 ceq nat-in-netlabels?(N,(pi(network(M),IN,OUT) ,np NIS)) = nat-in-netlabels?(N,NIS) if N ~n M = false .
  eq nat-in-netlabels?(N,mtNPIS) = false .

  op nat-in-weblabels? : Nat WebProcInfoSet -> Bool [metadata "120"] .
  eq nat-in-weblabels?(N,(pi(webapp(N),L) ,wp WIS)) = true [variant] .
 ceq nat-in-weblabels?(N,(pi(webapp(M),L) ,wp WIS)) = nat-in-weblabels?(N,WIS) if N ~n M = false .
  eq nat-in-weblabels?(N,mtWPIS) = false .

  op pid-in-netlabels? : AbsProcessId NetProcInfoSet -> Bool [metadata "121"] .
  eq pid-in-netlabels?(network(N), NIS) = nat-in-netlabels?(N,NIS) .
  eq pid-in-netlabels?(NNPI,       NIS) = false .
  eq pid-in-netlabels?(network,    NIS) = false .
  eq pid-in-netlabels?(webapp,     NIS) = false .

  op pid-in-weblabels? : AbsProcessId WebProcInfoSet -> Bool [metadata "122"] .
  eq pid-in-weblabels?(webapp(N),WIS) = nat-in-weblabels?(N,WIS) .
  eq pid-in-weblabels?(NWAI,     WIS) = false .
  eq pid-in-weblabels?(network,  WIS) = false .
  eq pid-in-weblabels?(webapp,   WIS) = false .

  op weblabels-dupl? : WebProcInfoSet -> Bool [metadata "123"] .
  eq weblabels-dupl?(pi(WAI,L) ,wp pi(WAI,L') ,wp WIS) = true .
 ceq weblabels-dupl?(pi(WAI,L)                ,wp WIS) = weblabels-dupl?(WIS) if pid-in-weblabels?(WAI,WIS) = false .
  eq weblabels-dupl?(pi(WAI,L))                        = false .
  eq weblabels-dupl?(mtWPIS)                           = false .

  op netlabels-dupl? : NetProcInfoSet -> Bool [metadata "124"] .
  eq netlabels-dupl?(pi(NPI,L,L') ,np pi(NPI',L1,L2) ,np NIS) = true .
 ceq netlabels-dupl?(pi(NPI,L,L') ,np                    NIS) = netlabels-dupl?(NIS) if pid-in-netlabels?(NPI,NIS) = false .
  eq netlabels-dupl?(pi(NPI,L,L'))                            = false .
  eq netlabels-dupl?(mtNPIS)                                  = false .

  op fresh-weblabel? : Nat WebProcInfoSet -> Bool [metadata "125"] .
  eq fresh-weblabel?(N + P,(pi(network(N    ),L),wp WIS)) = fresh-weblabel?(N + P,WIS) .
  eq fresh-weblabel?(N,    (pi(network(N + M),L),wp WIS)) = false .
  eq fresh-weblabel?(N,mtWPIS)                            = true .

  op fresh-netlabel? : Nat NetProcInfoSet -> Bool [metadata "126"] .
  eq fresh-netlabel?(N + P,(pi(network(N    ),L,L'),np NIS)) = fresh-netlabel?(N + P,NIS) .
  eq fresh-netlabel?(N,    (pi(network(N + M),L,L'),np NIS)) = false .
  eq fresh-netlabel?(N,mtNPIS)                               = true .

  op lbl-in-weblabels? : Label WebProcInfoSet -> Bool [metadata "127"] .
  eq lbl-in-weblabels?(L,(pi(WAI,L ),wp WIS)) = true .
 ceq lbl-in-weblabels?(L,(pi(WAI,L'),wp WIS)) = lbl-in-weblabels?(L,WIS) if L ~l L' = false .
  eq lbl-in-weblabels?(L,mtWPIS)              = false .

  op inlbl-in-netlabels? : Label NetProcInfoSet -> Bool [metadata "128"] .
  eq inlbl-in-netlabels?(IN,(pi(NPI,IN,OUT),np NIS)) = true .
 ceq inlbl-in-netlabels?(L, (pi(NPI,IN,OUT),np NIS)) = inlbl-in-netlabels?(L,NIS) if L ~l IN = false .
  eq inlbl-in-netlabels?(L,mtNPIS)                   = false .

  --- Other predicates
  op metadata-match? : Configuration WebProcInfoSet NetProcInfoSet -> Bool [metadata "129"] .
  eq metadata-match?(< WAI | URL(L) , A > < NPI | A' > C, pi(WAI,L) ,wp WIS, pi(NPI,L,L') ,np NIS) = metadata-match?(C,WIS,NIS) .
  eq metadata-match?(< WAI | URL(L) , A >              C, pi(WAI,L) ,wp WIS,               mtNPIS) = metadata-match?(C,WIS,mtNPIS) .
  eq metadata-match?(< NonPID | A >                    C,               WIS,                  NIS) = metadata-match?(C,WIS,NIS) .
  eq metadata-match?(< ui | A >                        C,               WIS,                  NIS) = metadata-match?(C,WIS,NIS) .
  eq metadata-match?(none,                                           mtWPIS,               mtNPIS) = true .

  --- Negations
  eq metadata-match?(                                  C,            mtWPIS,                 NNIS) = false .
 ceq metadata-match?(                                  C,              NWIS,                 NNIS) = false if webproc-url-netproc-in-conf?(C) = false .
 ceq metadata-match?(                                  C,              NWIS,               mtNPIS) = false if webproc-url-in-conf?(C) = false .
 ceq metadata-match?(                                  C, pi(WAI,L) ,wp WIS,                  NIS) = false if inlbl-in-netlabels?(L,NIS) = false .
 ceq metadata-match?(                                  C,               WIS, pi(NPI,L,L') ,np NIS) = false if lbl-in-weblabels?(L,WIS) = false .
endfm

fmod IBOS-SOP-FVP is
  pr CONFIGURATION-FVP-EXT .
  pr MSG-FVP-EXT .
  pr KERNEL-METADATA-FVP-EXT .
endfm

fmod IBOS-SOP-PRED is
  pr KERNEL-POLICIES-NONFVP-EXT .

  var NWC : NetWebProcConfig .
  var W N NNP NWA : Nat .
  var A : AttributeSet .
  var WIS : WebProcInfoSet .
  var NIS : NetProcInfoSet .
  var ML : MessageList .
  var NPI : NonPipeId .
  var UI : UIId .
  var NI NI1 NI2 : NetProcId .
  var WI : WebProcId .
  var PI PI' : PipeId .
  var IN OUT OUT1 OUT2 : Label .
  var MT : MsgType .
  var NonFetchMT : NonFetchMsg .
  var NonRetMT : NonRetMsg .
  var NonRFMT : NonRetFetchMsg .
  var AMsg : Message .

  --- Here, we prove two kinds of invariants:
  --- 1. check that the messages in an object's message queue are
  ---    consistent with our security policy
  --- 2. check that any message in the kernel's currentlyHandled()
  ---    attribute is consistent with our security policy
  ---
  --- Where our security policy is specified by the kernel's
  --- hardwired message policy object as well as:
  --- a. network process metadata
  --- b. webapp process metadata
  ---
  --- Note to prove properties (1)-(2) actually requires a quadruple
  --- induction, i.e. we induct over:
  --- i. every network/webapp process in the soup
  --- ii. every message in the message queue of such a process
  --- iii. every network process metadatum in the kernel info set
  --- iv. every webapp process metadatum in the kernel info set
  ---
  --- One feature of this specification is that processes are
  --- never deleted --- so that the process set/process info sets
  --- always grow monotonically. This simplifies the proof procedure.
  ---
  op p : NetWebProcConfig WebProcInfoSet NetProcInfoSet Message? -> Bool? [metadata "200"] .

  --- Prop 1
  eq p(< NI | fromKernel(msg(WI, NI, MSG-FETCH-URL, OUT) @ ML), A > NWC,(pi(WI,IN),wp WIS),(pi(NI,IN,OUT),np NIS),none) =
     p(< NI | fromKernel(                                  ML), A > NWC,(pi(WI,IN),wp WIS),(pi(NI,IN,OUT),np NIS),none) .
  eq p(< NI | fromKernel(msg(PI, NI, NonFetchMT,    OUT) @ ML), A > NWC,              WIS,                   NIS ,none) =
     p(< NI | fromKernel(                                  ML), A > NWC,              WIS,                   NIS ,none) .

  --- Handle WebProc to Kernel
  eq p(< WI | toKernel(msg(PI, NI1, MT, OUT) @ ML), A > NWC,(pi(WI,IN),wp WIS),(pi(NI2,IN,OUT),np NIS),none) =
     p(< WI | toKernel(                        ML), A > NWC,(pi(WI,IN),wp WIS),(pi(NI2,IN,OUT),np NIS),none) .
  --- Handle WebProcto Kernel negation
 ceq p(< WI | toKernel(msg(PI, NI1, MT, OUT) @ ML), A > NWC,WIS,NIS,none) = false if np-by-lbl?(OUT,NIS) = false .

  --- Handle NetProc to Kernel
  eq p(< NI | toKernel(msg(PI, WI, MT, OUT1) @ ML), A > NWC, (pi(WI,IN),wp WIS),(pi(NI,IN,OUT2),np NIS),none) =
     p(< NI | toKernel(                        ML), A > NWC, (pi(WI,IN),wp WIS),(pi(NI,IN,OUT2),np NIS),none) .
  --- Handle NetProc to Kernel negation
 ceq p(< NI | toKernel(msg(PI, WI, MT, OUT1) @ ML), A > NWC,WIS,NIS,none) = false if matching-procs?(NI,WI,WIS,NIS) = false .

  --- Handle currentlyHandled attribute
 ceq p(< NI | toKernel(ML), A > NWC,WIS,NIS,AMsg) = true if p(< NI | toKernel(AMsg @ ML), A > NWC,WIS,NIS,none) .
 ceq p(< WI | toKernel(ML), A > NWC,WIS,NIS,AMsg) = true if p(< WI | toKernel(AMsg @ ML), A > NWC,WIS,NIS,none) .

  --- Handle fresh webapps
 ceq p(NWC,(pi(WI,IN),wp WIS),NIS,    M:Message?) = p(NWC,WIS,NIS,M:Message?) if fresh-wp-id?(WI,NWC) .
 ceq p(NWC,WIS,(pi(NI,IN,OUT),np NIS),M:Message?) = p(NWC,WIS,NIS,M:Message?) if fresh-np-id?(NI,NWC) .

  --- eq p(< NI | fromKernel(mt), A > NWC, WIS, NIS,none) = p(NWC, WIS, NIS,none) .

  ---(
  --- SOP Prop 1. The kernel must route network requests from web page instances to the proper network process
  < NI | fromKernel(msg(WI, NI, MSG-FETCH-URL, OUT1) @ ML), Att >
  < kernel |
    weblabels(pi(WI,IN1),wp WPIS),
    netlabels(pi(NI,IN2,OUT2),np NPIS),
    displayedTopBar(URL),
    Att2 >
  such that OUT1 =/= OUT2 or IN1 =/= IN2 .

  --- SOP Prop 3. Ethernet frames from network processes to the NIC must have IP addr/port that matches origin of network process.
  < NI | mem-out(OUT1), Att >
  < kernel | netlabels(pi(NI, IN, OUT2),np NPIS), Att2 >
  such that OUT1 =/= OUT2 .

  --- SOP Prop 2. The kernel must route Ethernet frames from the network interface card (NIC) to the proper network process.
  < NI | mem-in(OUT2, LL), Att >
  < kernel | netlabels(pi(NI, IN, OUT2),np NPIS), Att2 >
  such that OUT1 =/= OUT2 .

  --- SOP Prop 4. HTTP data from network processes to web page instances must adhere to the SOP
  --- Q: Why does this one assume that IN matches but the other doesn't?
  < WI | loading(1), fromKernel(msg(NI, WI, MSG-RETURN-URL, OUT2) @ ML), Att >
  < kernel |
    weblabels(pi(WI, IN1),wp WPIS),
    networklabels(pi(NI, IN2, OUT1),np NPIS),
    Att2 >
  such that IN1 =/= IN2 or OUT1 =/= OUT2 .

  --- SOP Prop 5. Network processes for different web page instances must remain isolated.
  --- By defintion. Network processes are different objects with all communication through kernel.

  --- SOP Prop 6. The browser chrome (UI elements) and web page content displays are isolated.
  --- By defintiion. Display object is separate from kernel with UI chrome.

  --- SOP Prop 7. Only the current tab can access the screen, mouse, and keyboard.
  --- Implied by Prop 9 and ABC.

  --- Prop 9. The URL of the current tab is displayed to the user whenever screen is not about-blank.
  < kernel | displayedTopBar(URL1), Att >
  < display | activeWebapp(WI), Att2 >
  < WI  | URL(URL2), Att3 >
  such that URL1 =/= URL2 .

  --- ABC - Address Bar Correctness.
  < kernel  | displayedTopBar(URL),   Att  >
  < display | displayedContent(URL'), Att2 >
  such that URL =/= URL'
  and URL  =/= about-blank
  and URL' =/= about-blank .
  ---)
endfm

mod IBOS-SOP is
  pr IBOS-SOP-PRED .
  pr IBOS-STOP .
endm
