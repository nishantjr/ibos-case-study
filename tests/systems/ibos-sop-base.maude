load ../../systems/ibos.maude

--- NOTES:
--- [1] local simplifications in formula structure are unsound when shared variables
---     are present which exist outside of the fragment that are lost --- this is
---     because the information regarding the variables is lost when the constraint
---     is solved --- some possibilities:
---     a. make variables into constants, do reductions, and then lift reduced items
---        into my theory so they can be used in later reduction steps
---     b. do reductions over formula-functor lifted algebras --- here we can express
---        express constraints about variables directly in our rules
---     c. make two copies of the formula --- one non-reduced version and one reduced
---        version --- then be careful to always allow reductions for each goal locally
---        have access to the unreduced parts that were assumed (or something like that)
---     d. record each reduction step so we keep around the set of all true facts that
---        we can assume --- then give our other reductions access to that set
--- [2] because messages may be dynamically added to the list, we need to ensure
---     that the metadata in the kernel WIS/NIS has the correct shape so that when
---     this webapp receives a message of the form that we care about, we know the
---     metadata will look like what we need to complete the proof
--- [3] since the only way the message list can increase is by the rule
---     kernelForwardsOPMessage, it SHOULD be enough to require:
---     a. kernel's currentlyHandled() attribute to be correct
---     b. kernel's message policy is locked down to the minimum necessary
---        (this way we can't instantiate the message policy with weird connections
---         and send MSG-FETCH/RETURN-URLs down those connections) ---
---        thus, we choose the default initial policy:
---        (webapp,network,MSG-FETCH-URL)
---        (network,webapp,MSG-RETURN-URL)
---        (ui,webapp,MSG-SWITCH-TAB)
---        (ui,webapp,MSG-NEW-URL)
---     However, requiring the webapps to always be reflected properly in the
---     kernel metadata just means that we will never have a terminating state
---     where the kernel tried to send a message and could not because no webapp
---     was there to receive it.
---     Also, probably the narrowing time is similar... maybe.
--- [4] if handledCurrently contains some message addressed to non-existent processes,
---     we don't care---that is a weird state, but it doesn't concern us---what concerns
---     us is that if the message is received by a real webapp, then it will satisfy the
---     conditions above

fmod KERNEL-POLICIES-NONFVP-EXT is
  pr KERNEL-POLICIES-NONFVP .

  var C : Configuration .
  var W N M : Nat .
  var P : NzNat .
  var A A' : AttributeSet .
  var NA : NeAttributeSet .
  var NNPI : NonNetProcId .
  var NWAI : NonWebAppId .
  var PI PI' : ProcessId .
  var NPI : NetProcId .
  var WAI : WebAppId .
  var MSGL : MessageList .
  var L IN OUT : Label .
  var NIS : NetworkProcInfoSet .
  var WIS : WebappProcInfoSet .

  --- duplicates can ignore attributes
  op dupl? : Configuration -> Bool [metadata "87"] .
  eq dupl?(< PI | A > < PI | A' > C) = true .
  eq dupl?(< PI | toKernel(MSGL),      A > C) = dupl?(< PI | A > C) .
  eq dupl?(< PI | fromKernel(MSGL),    A > C) = dupl?(< PI | A > C) .
  eq dupl?(< PI | activeWebapp(WAI),   A > C) = dupl?(< PI | A > C) .
  eq dupl?(< PI | displayedContent(L), A > C) = dupl?(< PI | A > C) .
  eq dupl?(< network(N) | A > < kernel    | nextNetworkProc(N + 1), A' > C) = dupl?(< kernel    | nextNetworkProc(N), A' > C) .
  eq dupl?(< webapp(W)  | A > < webappmgr | nextWAN(W + 1),         A' > C) = dupl?(< webappmgr | nextWAN(W),         A' > C) .
  eq dupl?(< PI | A >) = false .
  eq dupl?(none) = false .
 ceq dupl?(< PI | none > < PI' | none > C) = dupl?(< PI | none > C) and dupl?(< PI' | none > C) if PI ~p PI' = false .

  op fresh-np-id? : Nat Configuration -> Bool [metadata "88"] .
  eq fresh-np-id?(N,     < network(N + M) | A > C) = false .
  eq fresh-np-id?(N + P, < network(N)     | A > C) = fresh-np-id?(N + P,C) .
  eq fresh-np-id?(N,     < network        | A > C) = fresh-np-id?(N,C) .
  eq fresh-np-id?(N,     < NNPI           | A > C) = fresh-np-id?(N,C) .
  eq fresh-np-id?(N,     none                    ) = true .
  eq fresh-np-id?(M,     < NPI           | NA > C) = fresh-np-id?(M, < NPI | none > C) .
 ceq fresh-np-id?(N + 1,                        C) = true if fresh-np-id?(N,C) .

  op fresh-wa-id? : Nat Configuration -> Bool [metadata "89"] .
  eq fresh-wa-id?(N,     < webapp(N + M) | A > C) = false .
  eq fresh-wa-id?(N + P, < webapp(N)     | A > C) = fresh-wa-id?(N + P,C) .
  eq fresh-wa-id?(N,     < webapp        | A > C) = fresh-wa-id?(N,C) .
  eq fresh-wa-id?(N,     < NWAI          | A > C) = fresh-wa-id?(N,C) .
  eq fresh-wa-id?(N,     none                   ) = true .
  eq fresh-wa-id?(M,     < WAI          | NA > C) = fresh-wa-id?(M, < WAI | none > C) .
 ceq fresh-wa-id?(N + 1,                       C) = true if fresh-wa-id?(N,C) .

  op inlabel-for-netproc : NetProcId NetworkProcInfoSet -> Label [ctor metadata "90"] .
  eq inlabel-for-netproc(NPI,(pi(NPI,IN,OUT),np NIS)) = IN .

  op outlabel-for-netproc : NetProcId NetworkProcInfoSet -> Label [ctor metadata "91"] .
  eq outlabel-for-netproc(NPI,(pi(NPI,IN,OUT),np NIS)) = OUT .

  op networkproc? : Nat NetworkProcInfoSet -> Bool [metadata "92"] .
  eq [nnp] : networkproc?(N,(pi(network(N),IN,OUT) ,np NIS)) = true [variant] .
 ceq [nnp2] : networkproc?(N,(pi(network(M),IN,OUT) ,np NIS)) = networkproc?(N,NIS) if N ~n M = false .
  eq [nnpf] : networkproc?(N,mtNPIS) = false .

  op webapp? : Nat WebappProcInfoSet -> Bool [metadata "93"] .
  eq [nwa] : webapp?(N,(pi(webapp(N),L) ,wp WIS)) = true [variant] .
 ceq [nwa2] : webapp?(N,(pi(webapp(M),L) ,wp WIS)) = webapp?(N,WIS) if N ~n M = false .
  eq [nwaf] : webapp?(N,mtWPIS) = false .

  op networkprocid? : ProcessId NetworkProcInfoSet -> Bool [metadata "94"] .
  eq networkprocid?(network(N), NIS) = networkproc?(N,NIS) .
  eq networkprocid?(network,    NIS) = false .
  eq networkprocid?(NNPI,       NIS) = false .

  op webappid? : ProcessId WebappProcInfoSet -> Bool [metadata "95"] .
  eq webappid?(webapp(N),WIS) = webapp?(N,WIS) .
  eq webappid?(webapp,   WIS) = false .
  eq webappid?(NWAI,     WIS) = false .
endfm

fmod IBOS-SOP-PRED is
  pr KERNEL-POLICIES-NONFVP-EXT .

  var C : Configuration .
  var W N NNP NWA : Nat .
  var A : AttributeSet .
  var WIS : WebappProcInfoSet .
  var NIS : NetworkProcInfoSet .
  var ML : MessageList .
  var NPI : NonPipeId .
  var UI : UIId .
  var NI : NetProcId .
  var WI : WebAppId .
  var PI PI' : PipeId .
  var IN OUT OUT' : Label .
  var MT : MsgType .
  var NonFetchMT : NonFetchMsg .
  var NonRetMT : NonRetMsg .
  var NonRFMT : NonRetFetchMsg .
  var AMsg : Message .

  --- Here, we prove two kinds of invariants:
  --- 1. check that the messages in an object's message queue are
  ---    consistent with our security policy
  --- 2. check that any message in the kernel's currentlyHandled()
  ---    attribute is consistent with our security policy
  ---
  --- Where our security policy is specified by the kernel's
  --- hardwired message policy object as well as:
  --- a. network process metadata
  --- b. webapp process metadata
  ---
  --- Note to prove properties (1)-(2) actually requires a quadruple
  --- induction, i.e. we induct over:
  --- i. every network/webapp process in the soup
  --- ii. every message in the message queue of such a process
  --- iii. every network process metadatum in the kernel info set
  --- iv. every webapp process metadatum in the kernel info set
  ---
  --- One feature of this specification is that processes are
  --- never deleted --- so that the process set/process info sets
  --- always grow monotonically. This simplifies the proof procedure.
  ---
  op p : Configuration WebappProcInfoSet NetworkProcInfoSet -> Bool [metadata "110"] .

  ------------------------------------------------------------------
  --- True if every FETCH-URL message sent from webapp is consistent
  --- NB: toKernel requires sender match by rule, and we ONLY send FETCH-URL messages
  ---
  eq p(C < WI | toKernel(msg(WI,network,MSG-FETCH-URL,  OUT ) @ ML), A >, (pi(WI,IN),wp WIS),                   NIS )
   = p(C < WI | toKernel(ML),                                        A >, (pi(WI,IN),wp WIS),                   NIS ) .
  eq p(C < WI | toKernel(msg(PI, PI',   NonRFMT,        OUT ) @ ML), A >, (pi(WI,IN),wp WIS),                   NIS )
   = p(C < WI | toKernel(ML),                                        A >, (pi(WI,IN),wp WIS),                   NIS ) .

  --- Negation of message acceptance condition above
  ---
 ceq p(C < WI | toKernel(msg(PI, PI',   MSG-FETCH-URL,  OUT ) @ ML), A >,WIS,NIS) = false if PI' ~p network = false .
 ceq p(C < WI | toKernel(msg(PI, PI',   MSG-FETCH-URL,  OUT ) @ ML), A >,WIS,NIS) = false if PI  ~p WI      = false .
  eq p(C < WI | toKernel(msg(PI, PI',   MSG-RETURN-URL, OUT ) @ ML), A >,WIS,NIS) = false .

  -----------------------------------------------------------------------
  --- True if every RETURN-URL message sent to every webapp is consistent
  ---
  eq p(C < WI | fromKernel(msg(NI, WI,  MSG-RETURN-URL, OUT ) @ ML), A >, (pi(WI,IN),wp WIS), (pi(NI,IN,OUT),np NIS))
   = p(C < WI | fromKernel(ML),                                      A >, (pi(WI,IN),wp WIS), (pi(NI,IN,OUT),np NIS)) .
  eq p(C < WI | fromKernel(msg(PI, PI', NonRetMT,       OUT ) @ ML), A >, (pi(WI,IN),wp WIS),                   NIS )
   = p(C < WI | fromKernel(ML),                                      A >, (pi(WI,IN),wp WIS),                   NIS ) .

  --- Negation of message acceptance condition above
  ---
 ceq p(C < WI | fromKernel(msg(PI, WI,  MSG-RETURN-URL, OUT ) @ ML), A >,WIS,NIS) = false if matching-procs?(PI,WI,WIS,NIS) and outlabel-for-netproc(PI,NIS) ~l OUT = false .
 ceq p(C < WI | fromKernel(msg(PI, PI', MSG-RETURN-URL, OUT ) @ ML), A >,WIS,NIS) = false if PI' ~p WI = false .

  -----------------------------------------------------------------------
  --- True if every FETCH-URL sent to every network process is consistent
  ---
  eq p(C < NI | fromKernel(msg(WI, NI,  MSG-FETCH-URL,  OUT ) @ ML), A >, (pi(WI,IN),wp WIS), (pi(NI,IN,OUT),np NIS))
   = p(C < NI | fromKernel(ML),                                      A >, (pi(WI,IN),wp WIS), (pi(NI,IN,OUT),np NIS)) .
  eq p(C < NI | fromKernel(msg(PI, PI', NonFetchMT,     OUT') @ ML), A >,               WIS,  (pi(NI,IN,OUT),np NIS))
   = p(C < NI | fromKernel(ML),                                      A >,               WIS,  (pi(NI,IN,OUT),np NIS)) .

  --- Negation of message acceptance condition above
  ---
 ceq p(C < NI | fromKernel(msg(PI, NI,  MSG-FETCH-URL,  OUT ) @ ML), A >,WIS,NIS) = false if matching-procs?(NI,PI,WIS,NIS) and outlabel-for-netproc(NI,NIS) ~l OUT = false .
 ceq p(C < NI | fromKernel(msg(PI, PI', MSG-FETCH-URL,  OUT ) @ ML), A >,WIS,NIS) = false if PI' ~p NI = false .

  -------------------------------------------------------------------------
  --- True if every RETURN-URL sent from every network object is consistent
  --- NB: toKernel doesn't require sender match, since kernel will rewrite, and we ONLY send RETURN-URL messages
  --- NB: cc1a/2a rule doesn't require the OUT labels match!!!!
  ---
  eq p(C < NI | toKernel  (msg(PI, WI,  MSG-RETURN-URL, OUT') @ ML), A >, (pi(WI,IN),wp WIS), (pi(NI,IN,OUT),np NIS))
   = p(C < NI | toKernel  (ML),                                      A >, (pi(WI,IN),wp WIS), (pi(NI,IN,OUT),np NIS)) .
  eq p(C < NI | toKernel  (msg(PI, PI', NonRFMT,        OUT ) @ ML), A >,               WIS,  (pi(NI,IN,OUT),np NIS))
   = p(C < NI | toKernel  (ML),                                      A >,               WIS,  (pi(NI,IN,OUT),np NIS)) .

  --- Negation of message acceptance condition above
  ---
 ceq p(C < NI | toKernel  (msg(PI, PI', MSG-RETURN-URL, OUT') @ ML), A >,WIS,NIS) = false if matching-procs?(NI,PI',WIS,NIS) = false .
  eq p(C < NI | toKernel  (msg(PI, PI', MSG-FETCH-URL,  OUT') @ ML), A >,WIS,NIS) = false .

  --- Negation of process identity constraint
  ---
 ceq p(C < NI | A >,WIS,NIS) = false if networkprocid?(NI,NIS) = false .
 ceq p(C < WI | A >,WIS,NIS) = false if webappid?(WI,WIS)      = false .

  --- Handle non-webapp, non-process objects, for completeness
  ---
  eq p(C < WI      | fromKernel(mt), toKernel(mt), A >, WIS, NIS) = p(C, WIS, NIS) .
  eq p(C < NI      | fromKernel(mt), toKernel(mt), A >, WIS, NIS) = p(C, WIS, NIS) .
  eq p(C < network |                               A >, WIS, NIS) = p(C, WIS, NIS) .
  eq p(C < webapp  |                               A >, WIS, NIS) = p(C, WIS, NIS) .
  eq p(C < NPI     |                               A >, WIS, NIS) = p(C, WIS, NIS) .
  eq p(C < UI      |                               A >, WIS, NIS) = p(C, WIS, NIS) .
  eq p(none,                                            WIS, NIS) = true .

  --- Handle kernel metadata sets
  ---
 ceq p(C,(pi(webapp(W),IN),wp WIS),                          NIS ) = p(C,WIS,NIS) if fresh-wa-id?(W,C) .
 ceq p(C,                     WIS ,(pi(network(N),IN,OUT),np NIS)) = p(C,WIS,NIS) if fresh-np-id?(N,C) .

  ------------------------------------------------------------------------------
  --- True if every RETURN-URL message currently handled by kernel is consistent
  --- NB: since message is headed towards a webapp, we don't need the OUT label to be consistent
  ---
  op mp : Message? WebappProcInfoSet NetworkProcInfoSet Nat Nat -> Bool [metadata "111"] .
  -----------------------------------------------------------------------------------
  --- webapp to network proc acceptance conditions
  eq mp(msg(WI,network,MSG-FETCH-URL,  OUT ), (pi(WI,IN),wp WIS),                   NIS,  NNP, NWA) = true .
  eq mp(msg(WI,PI,     NonFetchMT,     OUT ), (pi(WI,IN),wp WIS),                   NIS,  NNP, NWA) = true .
  --- webapp to network proc rejection  conditions
 ceq mp(msg(PI,PI',    MSG-FETCH-URL,  OUT ),               WIS,                    NIS,  NNP, NWA) = false if PI' ~p network = false .
 ceq mp(msg(PI,PI',    MSG-FETCH-URL,  OUT ),               WIS,                    NIS,  NNP, NWA) = false if webappid?(PI,WIS) = false .
  --- network proc to webapp acceptance conditions
  eq mp(msg(NI,WI,     MSG-RETURN-URL, OUT'), (pi(WI,IN),wp WIS), (pi(NI,IN,OUT),np NIS), NNP, NWA) = true .
  eq mp(msg(NI,PI,     NonRetMT,       OUT'),               WIS,  (pi(NI,IN,OUT),np NIS), NNP, NWA) = true .
  --- network proc to webapp rejection  conditions
 ceq mp(msg(PI,PI',    MSG-RETURN-URL, OUT ),               WIS,                    NIS,  NNP, NWA) = false if matching-procs?(PI,PI',WIS,NIS) = false .
 ceq mp(msg(PI,PI',    MSG-RETURN-URL, OUT ),               WIS,                    NIS,  NNP, NWA) = false if networkprocid?(PI,NIS) = false .
  --- other messages types, all OK
  eq mp(msg(PI,PI',    NonRFMT,        OUT ),               WIS,                    NIS,  NNP, NWA) = true .
  --- the none message is OK
  eq mp(none,WIS,NIS,NNP,NWA) = true .
  --- recurse on the non-message argument
  eq mp(AMsg,(pi(webapp(NWA + W),IN),wp WIS),                               NIS, NNP,NWA) = mp(AMsg,WIS,NIS,NNP,NWA) .
  eq mp(AMsg,                           WIS,(pi(network(NNP + N),IN,OUT),np NIS),NNP,NWA) = mp(AMsg,WIS,NIS,NNP,NWA) .
endfm

mod IBOS-SOP is
  pr IBOS-SOP-PRED .
  pr IBOS-STOP .
endm

