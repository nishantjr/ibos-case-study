load ../../systems/ibos-sig.maude

---
--- [PARTIALLY] FVP
---

---
--- 1. Separate ProcessIds into Net/WebProcs and everything else
---
fmod PROC-ID-FVP-EXT is
  pr PROC-ID .

  --- 1. Separate ProcessIds into Net/WebProcs and everything else
  sort ConcNetWebProcId .
  subsort ConcNetProcId ConcWebProcId < ConcNetWebProcId < ConcPipeId .
  sort NonConcNetWebProcId .
  subsort UIId NonPipeId < NonConcNetWebProcId .
endfm

---
--- 2. Separate Configurations into those made up of Net/WebProcs and everything else
--- 3. Add partially FVP predicate for checking if an object with the named ID is in the configuration
--- 4. Add partially FVP predicate for checking for duplicate object IDs in the configuration
---
fmod CONFIGURATION-FVP-EXT is
  pr PROC-ID-FVP-EXT .
  pr KERNEL-POLICIES-FVP .

  var P P' : ConcProcId . var A A' : AttributeSet . var C : Configuration .
  var P? : ProcessId .

  --- 2. Separate Configurations into those made up of Net/WebProcs and everything else
  sorts NetWebProcObject NetWebProcConfig NetWebProcNeConfig .
  subsort NetWebProcObject < Object .
  subsort NetWebProcObject < NetWebProcNeConfig < NeConfiguration NetWebProcConfig < Configuration .
  subsort EmptyConfiguration < NetWebProcConfig .
  op <_|_> : ConcNetWebProcId AttributeSet -> NetWebProcObject [ctor ditto metadata "35"] .
  op __ : NetWebProcConfig   NetWebProcConfig -> NetWebProcConfig   [ctor ditto metadata "37"] .
  op __ : NetWebProcNeConfig NetWebProcConfig -> NetWebProcNeConfig [ctor ditto metadata "37"] .

  sorts SpecialObject SpecialConfig SpecialNeConfig .
  subsort SpecialObject < Object .
  subsort SpecialObject < SpecialNeConfig < NeConfiguration SpecialConfig < Configuration .
  subsort EmptyConfiguration < SpecialConfig .
  op <_|_> : NonConcNetWebProcId AttributeSet -> SpecialObject [ctor ditto metadata "35"] .
  op __ : SpecialConfig   SpecialConfig -> SpecialConfig   [ctor ditto metadata "37"] .
  op __ : SpecialNeConfig SpecialConfig -> SpecialNeConfig [ctor ditto metadata "37"] .
endfm

---
--- 5. Add LabelPair and MaybeLabelPair datatypes
--- 6. Add MaybeLabelPair equality predicate _~lp_
--- 7. Add LabelPair projection functions
--- 8. Add _blank-or-equal_ function
---
fmod LABEL-FVP-EXT is
  pr LABEL .

  var L L' : Label .
  var N : Nat .
  var P : NzNat .
  var L1 L2 L1' L2' : MaybeLabel .
  var MMLP : MaybeMaybeLabel+Pair .
  var MLP : MaybeLabelPair .

  sort BlankLabel NonBlankLabel .
  subsort BlankLabel NonBlankLabel < Label .
  op about-blank : -> BlankLabel        [ctor ditto metadata "40"] .
  op url         : Nat -> NonBlankLabel [ctor ditto metadata "41"] .

  --- 5. Add LabelPair and MaybeLabelPair datatypes
  sort LabelPair MaybeLabelPair MaybeLabel+Pair MaybeMaybeLabel+Pair .
  subsort LabelPair < MaybeLabelPair  < MaybeMaybeLabel+Pair .
  subsort LabelPair < MaybeLabel+Pair < MaybeMaybeLabel+Pair .
  op nopair  :                       -> MaybeLabelPair       [ctor metadata "89"] .
  op ((_,_)) : Label Label           -> LabelPair            [ctor metadata "90"] .
  op ((_,_)) : MaybeLabel MaybeLabel -> MaybeMaybeLabel+Pair [ctor metadata "90"] .

  --- 6. Add MaybeLabelPair equality predicate _~lp_
  op _~lp_ : MaybeMaybeLabel+Pair MaybeMaybeLabel+Pair -> Bool [comm metadata "91"] .

  op outlbl : MaybeLabelPair -> MaybeLabel [metadata "93"] .

  --- 8. Add _blank-or-equal_ function
  op _blank-or-equal_ : Label Label -> Bool [metadata "94"] .
endfm

---
--- 9. Refine MsgType/Msg into subsorts for each kind of message
--- 10. Refine MessageList into empty and non-empty variants
--- 11. Refine MessageList into those with a FETCH message and those without
--- 13. Add predicate that returns false iff a MessageList contains a NEW-URL message with a given label
---
fmod MSG-FVP-EXT is
  pr MSG-LIST .

  var PI PI' : PipeId .
  var L OUT : Label .
  var ML ML2 : MessageList .
  var RetMT : RetMsgType .
  var FetchMT : FetchMsgType .

  --- 9. Refine MsgType/Msg into subsorts for each kind of message
  sort FetchMsgType RetMsgType NonRetFetchMsgType NonRetMsgType NonFetchMsgType .
  subsort NonRetFetchMsgType < NonRetMsgType NonFetchMsgType < MsgType .
  subsort FetchMsgType < NonRetMsgType .
  subsort RetMsgType   < NonFetchMsgType .
  op MSG-NEW-URL    : -> NonRetFetchMsgType [ctor metadata "48"] .
  op MSG-FETCH-URL  : -> FetchMsgType       [ctor metadata "49"] .
  op MSG-RETURN-URL : -> RetMsgType         [ctor metadata "50"] .
  op MSG-SWITCH-TAB : -> NonRetFetchMsgType [ctor metadata "51"] .
  ----------------------------------------------------

  sort NonRetFetchMsg FetchMsg RetMsg NonRetMsg NonFetchMsg .
  subsort NonRetFetchMsg < NonRetMsg NonFetchMsg < Message .
  subsort FetchMsg < NonRetMsg .
  subsort RetMsg   < NonFetchMsg .
  op msg : PipeId PipeId FetchMsgType       Label -> FetchMsg       [ctor ditto metadata "52"] .
  op msg : PipeId PipeId RetMsgType         Label -> RetMsg         [ctor ditto metadata "52"] .
  op msg : PipeId PipeId NonFetchMsgType    Label -> NonFetchMsg    [ctor ditto metadata "52"] .
  op msg : PipeId PipeId NonRetMsgType      Label -> NonRetMsg      [ctor ditto metadata "52"] .
  op msg : PipeId PipeId NonRetFetchMsgType Label -> NonRetFetchMsg [ctor ditto metadata "52"] .

  --- 10. Refine MessageList into empty and non-empty variants
  sort EmptyMessageList .
  subsort EmptyMessageList < MessageList .
  op mt  : -> EmptyMessageList [ctor ditto metadata "5"] .
  op _@_ : EmptyMessageList EmptyMessageList -> EmptyMessageList [ctor ditto metadata "54"] .

  sort NeMessageList .
  subsort Message < NeMessageList < MessageList .
  op _@_ : NeMessageList MessageList -> NeMessageList [ctor ditto metadata "54"] .
  op _@_ : MessageList NeMessageList -> NeMessageList [ctor ditto metadata "54"] .

  --- 11. Refine MessageList into those with a FETCH message and those without
  sort NonFetchMsgList NeNonFetchMsgList HasFetchMsgList .
  subsort EmptyMessageList < NonFetchMsgList < MessageList .
  subsort NonFetchMsg < NeNonFetchMsgList < NonFetchMsgList NeMessageList .
  subsort FetchMsg < HasFetchMsgList < NeMessageList .
  op _@_ : NonFetchMsgList NeNonFetchMsgList -> NeNonFetchMsgList [ctor ditto metadata "54"] .
  op _@_ : NeNonFetchMsgList NonFetchMsgList -> NeNonFetchMsgList [ctor ditto metadata "54"] .
  op _@_ : NonFetchMsgList NonFetchMsgList -> NonFetchMsgList [ctor ditto metadata "54"] .
  op _@_ : NonFetchMsgList HasFetchMsgList -> HasFetchMsgList [ctor ditto metadata "54"] .
  op _@_ : HasFetchMsgList NonFetchMsgList -> HasFetchMsgList [ctor ditto metadata "54"] .
  op _@_ : HasFetchMsgList HasFetchMsgList -> HasFetchMsgList [ctor ditto metadata "54"] .
  op _@_ : MessageList     HasFetchMsgList -> HasFetchMsgList [ctor ditto metadata "54"] .
  op _@_ : HasFetchMsgList MessageList     -> HasFetchMsgList [ctor ditto metadata "54"] .

  --- 13. Add predicate that returns false iff a MessageList contains a NEW-URL message with a given label
  --- NB: this is an auxiliary predicate for ui-consistent
  op newurl-nodupl? : Label MessageList -> Bool [metadata "198 false"] .

  op noRetMsg? : MessageList -> Bool [metadata "195 false"] .

  op sender : NeMessageList -> PipeId [metadata "194"] .

  op label : NeMessageList -> Label [metadata "192"] .

  op tail : NeMessageList -> MessageList [metadata "193"] .
endfm

---
--- 14. Refine Net/WebProcInfoSet into empty and non-empty variants
--- 15. Add Net/WebProcInfo equality predicates
--- 16. Add partially FVP predicates for checking if a ProcessId is mapped in a Net/WebProcInfoSet
---
fmod KERNEL-METADATA-FVP-EXT is
  pr KERNEL-POLICIES-FVP .
  pr LABEL-FVP-EXT .

  --- 14. Refine Net/WebProcInfoSet into empty and non-empty variants
  sort NeWebProcInfoSet .
  subsort WebProcInfo < NeWebProcInfoSet < WebProcInfoSet .
  sort NeNetProcInfoSet .
  subsort NetProcInfo < NeNetProcInfoSet < NetProcInfoSet .
  op _,wp_ : NeWebProcInfoSet WebProcInfoSet -> NeWebProcInfoSet [ctor ditto metadata "74"] .
  op _,np_ : NeNetProcInfoSet NetProcInfoSet -> NeNetProcInfoSet [ctor ditto metadata "77"] .
endfm

---
--- 17. Generalize typing of returnTo(), rendered(), fromKernel(), and toKernel() attributes (used for attribute canonicalization)
--- 18. Add attribute type equality predicate _~a_
--- 19. Add partially FVP in-attrset?(_|_) predicate for checking if an attribute of a given type exists in an attribute set
--- 20. Add partially FVP attr-dupl?() predicate for checking if an attribute type occurs twice in a given attribute set
---
fmod ATTRIBUTE-FVP-EXT is
  pr PROC-ID-FVP-EXT .
  pr KERNEL-POLICIES-FVP .
  pr MSG-FVP-EXT .
  var A A' : Attribute . var AS AS' : AttributeSet .

  --- 18. Add attribute type equality predicate _~a_
  op _~a_ : Attribute Attribute -> Bool [comm metadata "100"] .





















  --- 19. Add partially FVP in-attrset?(_|_) predicate for checking if an attribute of a given type exists in an attribute set
  op in-attrset?(_|_) : Attribute AttributeSet -> Bool [metadata "102 true"] .

  --- 20. Add partially FVP attr-dupl?() predicate for checking if an attribute type occurs twice in a given attribute set
  op attr-dupl? : AttributeSet -> Bool [metadata "103 true"] .
endfm

---
--- 21. Extract a Label/Pair from a Web/NetProcInfoSet by ProcessId
--- 22. Find a WebProcId in a WebProcInfoSet via NetProcId and NetProcInfoSet
--- 23. Check if a label appears in a WebProcInfo in a WebProcInfoSet
--- 24. Check if a label appears in the first component of a NetProcInfo in a NetProcInfoSet
--- 25. Check if a WebProc (specified by name or indirectly by NetProcId, NetProcInfoSet, and WebProcInfoSet)
---     has a loading?() attribute that is set to true
---
fmod IBOS-AUX-FVP is
  pr CONFIGURATION-FVP-EXT .
  pr LABEL-FVP-EXT .
  pr MSG-FVP-EXT .
  pr KERNEL-METADATA-FVP-EXT .
  pr ATTRIBUTE-FVP-EXT .

  var N M : Nat .
  var Z   : NzNat .

  var P? : ProcessId .
  var P P' : ConcProcId .
  var PP PP' : ConcPipeId .
  var MP MP' : MaybePipeId .
  var AP : AbsPipeId .
  var WP WP' : ConcWebProcId .
  var NP NP' : ConcNetProcId .
  var NN : NullProcId .
  var SP : NonPipeId .
  var UI : UIId .

  var C : Configuration .
  var NWC : NetWebProcConfig .
  var NNWC : NetWebProcNeConfig .
  var At : Attribute .
  var A A' : AttributeSet .
  var NA : NeAttributeSet .
  var WIS : WebProcInfoSet .
  var NWIS : NeWebProcInfoSet .
  var NIS : NetProcInfoSet .
  var NNIS : NeNetProcInfoSet .
  var IN IN' OUT OUT' U R L L' : Label .

  --- ABC-2. check that the display and address bar are consistent with the rendered() and URL() attributes of the active WebProc
  ---        [this is the intersection of properties P_9 and P_10 in the IBOS paper]
  op display-topbar-consistent? : ConcWebProcId Label Label Configuration -> Bool [metadata "105 true"] .

  --- 30. Check that given Net/WebProcId is greater than all those in the Configuration
  op fresh-np-id? : ConcNetProcId Configuration -> Bool [metadata "106 false"] .

  op fresh-wp-id? : ConcWebProcId Configuration -> Bool [metadata "107 false"] .

  --- 34. Check that given Net/WebProcId is greater than all those in the Net/WebProcInfoSet
  op fresh-weblabel? : ConcWebProcId WebProcInfoSet -> Bool [metadata "108 false"] .

  op fresh-netlabel? : ConcNetProcId NetProcInfoSet -> Bool [metadata "109 false"] .

  --- 21. Extract a Label/Pair from a Web/NetProcInfoSet by ProcessId
  op weblabel-by-pid : MaybeProcessId WebProcInfoSet -> MaybeLabel [metadata "110 L:Label"] .

  op netlabelpair-by-pid : MaybeProcessId NetProcInfoSet -> MaybeLabelPair [metadata "111 L:LabelPair"] .


  --- 23. Check if a label appears in a WebProcInfo in a WebProcInfoSet
  op lbl-in-weblabels? : Label WebProcInfoSet -> Bool [metadata "112 true"] .

  --- 24. Check if a label appears in the first component of a NetProcInfo in a NetProcInfoSet
  op np-by-inlbl? : Label NetProcInfoSet -> Bool [metadata "113 true"] .

  op webproc-req-attrs : AttributeSet -> Bool [metadata "114 true"] .

  op netproc-req-attrs : AttributeSet -> Bool [metadata "115 true"] .

  --- 3. Add partially FVP predicate for checking if an object with the named ID is in the configuration
  op in-conf? : ProcessId Configuration -> Bool [metadata "116 true"] .
  --- recursive cases
  --- base cases
  --- lemmas

  --- 4. Add partially FVP predicate for checking for duplicate object IDs in the configuration
  op conf-dupl? : Configuration -> Bool [metadata "133 true"] .

  op in-wis? : WebProcInfo WebProcInfoSet -> Bool [metadata "130 true"] .

  op in-nis? : NetProcInfo NetProcInfoSet -> Bool [metadata "131 true"] .

  op goodCtxt? : NetWebProcConfig WebProcInfoSet NetProcInfoSet -> Bool [metadata "132"] .
  ---
endfm

---
--- This module defines neeeded FVP predicates for specifying the same-origin policy (SOP) invariant
---
fmod IBOS-SOP-PRED-FVP is
  pr IBOS-AUX-FVP .
endfm

---
--- This module defines neeeded FVP predicates for specifying the address bar correctness (ABC) invariant
---
fmod IBOS-ABC-PRED-FVP is
  pr IBOS-AUX-FVP .
endfm

fmod IBOS-PREDS-FVP is
  pr IBOS-SOP-PRED-FVP .
  pr IBOS-ABC-PRED-FVP .
endfm

---
--- NON-FVP
---

---
--- 26. Canonicalizes attribute values so attribute types can be compared by standard equality
--- 27. Checks that each kind of attribute in an attribute set appears in a different set
---
fmod ATTRIBUTE-NONFVP-EXT is
  pr ATTRIBUTE-FVP-EXT .
endfm

---
--- 28. Lemmas for some FVP symbols
--- 29. Canonicalize all attribute values in all objects in Configuration
--- 30. Check that given Net/WebProcId is greater than all those in the Configuration
--- 31. Return true iff an attribute type is duplicated in some object in the Configuration
--- 32. Return true iff all Net/WebProcs in a Configuration have their required attributes (part of WF() predicate in paper)
--- 33. Check that there are no duplicate ProcessIds in a Web/NetProcInfoSet
--- 34. Check that given Net/WebProcId is greater than all those in the Net/WebProcInfoSet
--- 35. Check if a given Label occurs as first component in some NetProcInfo in a NetProcInfoSet
--- 36. Given a Net/WebProcId, extract the first/second component of a Net/WebProcInfo in a Net/WebProcInfoSet
--- 37. Check if a given ProcessId appears in a Net/WebProcInfo in a Net/WebProcInfoSet
--- 38. Check that all of the Net/WebProcs in a Configuration map bijectively to each Net/WebProcInfos in the given Net/WebProcInfoSets
--- 39. Check that each WebProc and URL() attribute map bijectively to each WebProcInfo in the given WebProcInfoSet
--- 40. For each NetProcInfo in the NetProcInfoSet, we require that IN and OUT labels match
--- 41. Check that all Fetch messages in a given message list have unique labels
---
fmod IBOS-AUX-NONFVP is
  pr IBOS-PREDS-FVP .
  pr KERNEL-POLICIES-NONFVP .
  pr ATTRIBUTE-NONFVP-EXT .

  var W N M : Nat .
  var Z     : NzNat .

  var C C' : Configuration .
  var NC : NeConfiguration .
  var NWC : NetWebProcConfig .

  var At At' : Attribute .
  var A A'   : AttributeSet .
  var NA     : NeAttributeSet .

  var P?     : ProcessId .
  var P P'   : ConcProcId .
  var PP PP' : PipeId    .
  var NPP    : NonPipeId .
  var NP NP' : ConcNetProcId .
  var NNP    : NonNetPipeId .
  var WP WP' : ConcWebProcId .
  var NWP    : NonWebPipeId .
  var NNWP   : NonConcNetWebProcId .
  var CNWP   : ConcNetWebProcId .

  var NIS  : NetProcInfoSet .
  var WIS  : WebProcInfoSet .
  var NWIS : NeWebProcInfoSet .
  var NNIS : NeNetProcInfoSet .

  var B : Bool .
  var RetMT : RetMsgType .
  var FetchMT : FetchMsgType .
  var MSGL MSGL2 : MessageList .
  var L L' L1 L2 IN OUT : Label .
  var LL LL' : LabelList .

  --- 31. Return true iff an attribute type is duplicated in some object in the Configuration
  op conf-attr-dupl? : Configuration -> Bool [metadata "119"] .

  --- 32. Return true iff all Net/WebProcs in a Configuration have their required attributes (part of WF() predicate in paper)
  op nwp-reqattrs? : NetWebProcConfig -> Bool [metadata "120"] .

  --- TODO: is there a reason for this formulation?
  --- 37. Check if a given ProcessId appears in a Net/WebProcInfo in a Net/WebProcInfoSet
  op pid-in-netlabels? : ProcessId NetProcInfoSet -> Bool [metadata "121"] .

  op pid-in-weblabels? : ProcessId WebProcInfoSet -> Bool [metadata "122"] .

  op out-netlabel-by-pid : ProcessId NetProcInfoSet -> MaybeLabel [metadata "125"] .

  --- 33. Check that there are no duplicate ProcessIds in a Web/NetProcInfoSet
  op weblabels-dupl? : WebProcInfoSet -> Bool [metadata "126"] .

  op netlabels-dupl? : NetProcInfoSet -> Bool [metadata "127"] .

  --- 41. Check that all Fetch messages in a given message list have unique labels
  op ui-consistent? : MessageList WebProcInfoSet -> Bool [metadata "200"] .
  --- SWITCH-TAB
  --- NEW-URL
  --- OTHER MESSAGES
  --- Simplification of WIS

  op allEqLabel? : Label LabelList -> Bool [metadata "201"] .

  --- TODO: properly encode conditions for using a label somewhere
  --- TODO: add simplification rules used in other equations
  op label-used1? : Label NetWebProcConfig -> Bool [metadata "190"] .
  op label-used2? : Label Message? -> Bool [metadata "191"] .
endfm

---
--- This module defines needed Non-FVP predicates for specifying the same-origin (SOP) invariant
--- SOP-1. Check the same-origin policy (SOP), written `p` for brevity
---
fmod IBOS-SOP-PRED is
  pr IBOS-AUX-NONFVP .

  var B : Bool .
  var NWC : NetWebProcConfig .
  var NNWC : NetWebProcNeConfig .
  var C : Configuration .
  var A A' : AttributeSet .
  var WIS : WebProcInfoSet .
  var NWIS : NeWebProcInfoSet .
  var NIS : NetProcInfoSet .
  var NNIS : NeNetProcInfoSet .
  var ML ML2 : MessageList .
  var NI : ConcNetProcId .
  var MNI : MaybeConcNetProcId .
  var WI WI' : ConcWebProcId .
  var PI PI' : PipeId .
  var L L' IN OUT : Label .
  var LL LL' : LabelList .
  var M?  : Message? .
  var WTK WFK NTK NFK : MessageList .
  var IL OL : LabelList .
  var MI MO : MaybeLabel .
  var CPI : ConcPipeId .

  ---(
  < N'     | fromKernel(msg(N, N', MSG-FETCH-URL, L1), ML),              A  >
  < kernel | weblabels(pi(N,L1'), WIS), netlabels(pi(N', L2', L2), NIS), A' >

  such that L1 =/= L2 or L1' =/= L2'

  < N      | in(L1, LL),                   A  >
  < kernel | netlabels(pi(N, L, L2), NIS), A' >

  such that L1 =/= L2

  < N      | out(L1),                       A  >
  < kernel | netlabels(pi(N, L', L2), NIS), A' >

  such that L1 =/= L2

  < N      | loading(true), fromKernel(msg(N', N, MSG-RETURN-URL, L2), ML), A  >
  < kernel | weblabels(pi(N, L'), WIS), netlabels(pi(N', L', L1), NIS),     A' >

  such that L1 =/= L2
  ---)

  op dropCurrHandled? : Message? -> Bool [metadata "208"] .

  op consumeCurrHandled? : ConcWebProcId ConcNetProcId Message? -> Message? [metadata "207"] .

  --- NOTE: when this is processed, the NetProc has already been created
  op currHandled1? : ConcWebProcId ConcNetProcId Label Message? -> Bool [metadata "202"] .
  --- main cases
  --- don't care true cases

  op currHandled2? : Message? WebProcInfoSet -> Bool [metadata "203"] .
  --- SWITCH-TAB
  --- NEW-URL
  --- don't care true cases

  --- NOTE: not np-by-inlbl?() condition forces only fetch-url to be processed
  op fetchMsg1? : ConcWebProcId Bool Label MessageList NetProcInfoSet -> Bool [metadata "204"] .

  op fetchMsg2? : ConcWebProcId ConcNetProcId Label MessageList -> Bool [metadata "205"] .

  op retMsg? : ConcWebProcId ConcNetProcId Label MessageList -> Bool [metadata "206"] .

  --- Check the same-origin policy (SOP), written `p` for brevity
  op p : NetWebProcConfig WebProcInfoSet NetProcInfoSet Message? -> Bool? [metadata "250"] .
  --- Throw out all cases where configuration process groups/metadata inconsistent
 ceq p(< WI |                     A > NWC,WIS,NIS,M?) = false if weblabel-by-pid(WI,WIS)       = nolabel .
 ceq p(< WI | URL(L),             A > NWC,WIS,NIS,M?) = false if in-wis?(pi(WI,L),WIS)         = false   .
 ceq p(< WI | loading(B), URL(L), A > NWC,WIS,NIS,M?) = false if np-by-inlbl?(L,NIS) and not B = true    .
 ceq p(< NI |                     A > NWC,WIS,NIS,M?) = false if netlabelpair-by-pid(NI,NIS)   = nopair  .
 ceq p(< NI | returnTo(WI),       A > NWC,WIS,NIS,M?) = false if weblabel-by-pid(WI,WIS)       = nolabel .
 ceq p(< NI | returnTo(WI),       A > NWC,WIS,NIS,M?) = false if in-conf?(WI,NWC)              = false   .

 ceq p(< WI | URL(L),             A > NWC,pi(WI ,L'),wp WIS,NIS,M?) = false if L  ~l L'  = false .
 ceq p(< WI | URL(L),             A > NWC,pi(WI',L ),wp WIS,NIS,M?) = false if WI ~p WI' = false .

 ceq p(< NI | returnTo(CPI),      A > NWC,pi(WI',L ),wp WIS,pi(NI,L,L'),np NIS,M?) = false if CPI ~p WI' = false .

 ceq p(NWC,pi(WI,IN),wp WIS,                 NIS,M?) = false if in-conf?(WI,NWC)          = false .
 ceq p(NWC,             WIS,pi(NI,IN,OUT),np NIS,M?) = false if in-conf?(NI,NWC)          = false .
 ceq p(NWC,             WIS,pi(NI,IN,OUT),np NIS,M?) = false if lbl-in-weblabels?(IN,WIS) = false .
 ceq p(NWC,             WIS,pi(NI,IN,OUT),np NIS,M?) = false if IN ~l OUT                 = false .

  eq p(none,NWIS,  NIS,   M?) = false .
  eq p(none,WIS,   NNIS,  M?) = false .
  eq p(NWC, mtWPIS,NNIS,  M?) = false .
  eq p(NNWC,mtWPIS,mtNPIS,M?) = false .

  --- Whenever metadata is consistent, consume whole processing units
  --- Group 2 - loaded WebProc and NetProc
 ceq p(< WI | URL(L), loading(B), toKernel(WTK), fromKernel(WFK), A >
       < NI | returnTo(WI), fromKernel(NFK), out(OL), mem-out(MO), mem-in(MI), in(IL), toKernel(NTK), A' > NWC,
              pi(WI,L),wp WIS,pi(NI,L,L),np NIS,M?)
   = p(NWC,WIS,NIS,consumeCurrHandled?(WI,NI,M?))
  if B and currHandled1?(WI,NI,L,M?) and fetchMsg1?(WI,B,L,WTK,NIS) and fetchMsg2?(WI,NI,L,WFK)
       and allEqLabel?(L,OL ; IL) and L ~l MO and L ~l MI and retMsg?(WI,NI,L,NTK @ WFK) = true .

 ceq p(< WI | URL(L), loading(B), toKernel(WTK), fromKernel(WFK), A >
       < NI | returnTo(WI), fromKernel(NFK), out(OL), mem-out(MO), mem-in(MI), in(IL), toKernel(NTK), A' > NWC,
              pi(WI,L),wp WIS,pi(NI,L,L),np NIS,M?)
   = false
  if B and currHandled1?(WI,NI,L,M?) and fetchMsg1?(WI,B,L,WTK,NIS) and fetchMsg2?(WI,NI,L,WFK)
       and allEqLabel?(L,OL ; IL) and L ~l MO and L ~l MI and retMsg?(WI,NI,L,NTK @ WFK) = false .

  --- Group 1 - not loaded WebProc
 ceq p(< WI | loading(B), URL(L), toKernel(WTK), fromKernel(WFK), A > NWC,pi(WI,L),wp WIS,NIS,M?) = p(NWC,WIS,NIS,M?)
  if np-by-inlbl?(L,NIS) = false
  /\ fetchMsg1?(WI,B,L,WTK,NIS) and noRetMsg?(WFK) = true .

 ceq p(< WI | loading(B), URL(L), toKernel(WTK), fromKernel(WFK), A > NWC,pi(WI,L),wp WIS,NIS,M?) = false
  if np-by-inlbl?(L,NIS) = false
  /\ fetchMsg1?(WI,B,L,WTK,NIS) and noRetMsg?(WFK) = false .

 ceq p(NWC,WIS,NIS,M?) = p(NWC,WIS,NIS,none) if dropCurrHandled?(M?) = true .

  eq p(none,mtWPIS,mtNPIS,M?) = true .
endfm

---
--- This module defines neeeded Non-FVP predicates for specifying the address bar correctness (ABC) invariant
--- ABC-3. For each WebProc, the rendered() attribute should be blank or equal to the URL() attribute
---
fmod IBOS-ABC-PRED is
  pr IBOS-AUX-NONFVP .

  var NIS : NetProcInfoSet .
  var NWC : NetWebProcConfig .
  var WI : ConcWebProcId .
  var NI : ConcNetProcId .
  var A : AttributeSet .
  var ML : MessageList .
  var IN OUT L : Label .
  var B : Bool .

  --- ABC-3. For each WebProc, the rendered() attribute should be blank or equal to the URL() attribute
  --- COMPLETENESS requires attr-subset condition to negate URL/rendered pair being present
endfm

--- This module gathers all additional predicates together
fmod IBOS-PREDS is
  pr IBOS-SOP-PRED .
  pr IBOS-ABC-PRED .
endfm

--- This module enriches the IBOS system extended with the `stop` rule with all additional predicates
mod IBOS-STOP-WITH-PREDS is
  pr IBOS-PREDS .
  pr IBOS-STOP .
endm

load ~/work/mfe/src/mfe.maude

mod TEST is
  pr CRChC-TOOLS .

  op mod : -> Module [memo] .
  eq mod = upModule('IBOS-PREDS,true) .
endm

---(
red sym-crcCritPairs@(mod,0) .
red sym-crcCritPairs@(mod,1) .
red sym-crcCritPairs@(mod,2) .
red sym-crcCritPairs@(mod,3) .
red sym-crcCritPairs@(mod,4) .
red sym-crcCritPairs@(mod,5) .
red sym-crcCritPairs@(mod,6) .
red sym-crcCritPairs@(mod,7) .
red sym-crcCritPairs@(mod,8) .
red sym-crcCritPairs@(mod,9) .
red sym-crcCritPairs@(mod,10) .
red sym-crcCritPairs@(mod,11) .
red sym-crcCritPairs@(mod,12) .
red sym-crcCritPairs@(mod,13) .
red sym-crcCritPairs@(mod,14) .
red sym-crcCritPairs@(mod,15) .
red sym-crcCritPairs@(mod,16) .
red sym-crcCritPairs@(mod,17) .
red sym-crcCritPairs@(mod,18) .
red sym-crcCritPairs@(mod,19) .
red sym-crcCritPairs@(mod,20) .
red sym-crcCritPairs@(mod,21) .
red sym-crcCritPairs@(mod,22) .
---)
red sym-crcCritPairs@(mod,getEqs(mod),getEqs(mod),(none,0)) .

quit
