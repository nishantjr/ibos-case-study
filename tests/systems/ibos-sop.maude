load ../../systems/ibos-sop-pred-nou.maude --- contextual rewriting
load ../../systems/ibos-sop-fvp-noau.maude --- varsat
load ../../systems/ibos-sop-noau.maude     --- everything

set show advisories off .
set print attribute on .
---set print with parentheses on .

load ../../rltool-lib.maude

--- NOTE: these are applied to an IMPLICATION!!!!
---       so in the antecedent, equality/disequality is reversed
---       .... but not in the succedent
fmod FOFORMSIMPLIFY-IMP-IMPL-EXT is
  pr FOFORMSIMPLIFY-IMP-IMPL .

  var D : Disj .
  var T T' : Term .
  var L L' : TermList .

  eq '_~l_[T,T'] != 'true.Bool   = T != T' .
  eq '_~l_[T,T'] ?= 'true.Bool   = T ?= T' .

  eq 'false.Bool ?= '_and_[T,T'] = 'false.Bool ?= T \/ 'false.Bool ?= T' .
  eq 'false.Bool != '_and_[T,T'] = 'false.Bool != T \/ 'false.Bool != T' .
  eq 'false.Bool ?= 'true.Bool   = ff .
  eq 'false.Bool != 'true.Bool   = tt .

  --- FIXME: added to core simplifier module because we cannot use this module for simplification except during proof
  --- eq 'in-attrset?`(_|_`)['URL[T],T'] != 'true.Bool = T' != '_`,_['URL['@@@1:Label],'@@@2:AttributeSet] .
endfm

select RLTOOL .
loop rltl-init .

(select IBOS-SOP-NOID .)

--- Solved:
--- 1. fetch
--- 2. kernelReceivesOPMessage-pa7
--- 3. kernelReceivesOPMessage-pa6-a
--- 4. kernelReceivesOPMessage-pa6-b
--- 5. new-url
--- 6. kernelForwardsOPMessage
--- 7. render
--- 8. request-from-webapp
--- 9. proc-in

--- Todo:

--- Usage: select-rls ...
(select-rls new-url .)

(use tool conrew  for validity         on IBOS-SOP-PRED-NOID with FOFORMSIMPLIFY-IMP-IMPL-EXT .)
(use tool conrew  for unsatisfiability on IBOS-SOP-PRED-NOID .)
(use tool varunif for varunif          on IBOS-SOP-FVP-NOID  .)
(declare-vars (C:Configuration) U (NWC:NetWebProcConfig) U (WIS:WebProcInfoSet) U (NIS:NetProcInfoSet) U (MSG?:Message?) U
              (NNP:Nat) U (NWP:Nat) U (CURR:Label) U (B:Bool) U (B':Bool) U (UIML:MessageList) U (AWP:WebProcId) U
	      (DISP:Label) U (NICIN:LabelList) U (NICOUT:LabelSet) U (NI:ConcNetProcId) U (NI?:NetProcId) U
	      (F:MessageList) U (T:MessageList) U (D:Label) U (L:Bool) U (U:Label) U (IN:Label) U (IN2:Label) U (OUT:Label) U
	      (A:AttributeSet) U (A':AttributeSet) U (MT:MsgType) U (LL:LabelList) U
	      (NWI:ConcNetWebProcId) U (WI:ConcWebProcId) U (PP1:ConcPipeId) U (PP2:ConcPipeId) .)
(def-term-set ([C:Configuration]) | true .)
--- INV is a generalized multiset equality between:
--- [1] set of fromKernel messages at the beginning of a list in a netproc
--- [2] labels in WebappInfoSet and NetworkProcInfoSet
--- TODO: consider version with abstract policy that includes this policy as a subset???
---       check what other kinds of messages are allowed between webapp/network in the original model
(inv sop4 to '`[_`] on
({ NWC
   < ui | toKernel(UIML) >
   < display | activeWebapp(AWP), displayedContent(DISP) >
   < nic | in(NICIN), nic-out(NICOUT) >
   < webappmgr | nextWPN(NWP) >
   < kernel | weblabels(WIS), netlabels(NIS), displayedTopBar(CURR), handledCurrently(MSG?), nextNPN(NNP),
       msgPolicy(policy(webapp, network,MSG-FETCH-URL ),ps
                 policy(ui,     webapp, MSG-NEW-URL   ),ps
		 policy(ui,     webapp, MSG-SWITCH-TAB),ps
		 policy(network,webapp, MSG-RETURN-URL)) > }) |
   (conf-labels-eqset?(NWC !c,WIS,NIS)) = (true)  /\
   (p(NWC,WIS,NIS,MSG?))                = (true)  /\
   (nwp-reqattrs?(NWC !c))              = (true)  /\
   (weblabels-dupl?(WIS))               = (false) /\
   (netlabels-dupl?(NIS))               = (false) /\
   (conf-attr-dupl?(NWC !c))            = (false) /\
   (conf-dupl?(NWC))                    = (false) /\
   (fresh-wp-id?(webapp(NWP), NWC !c))  = (true)  /\
   (fresh-np-id?(network(NNP),NWC !c))  = (true)  /\
   (fresh-weblabel?(webapp(NWP),WIS))   = (true)  /\
   (fresh-netlabel?(network(NNP),NIS))  = (true)
.)
(start-proof .)
--- set break on .
--- break select step-action .
set print conceal on .
print conceal fmod_is_sorts_.____endfm mod_is_sorts_._____endm _;;_ . --- _;_ _`[_`] . --- _&&_ _|_
(auto .)

--- pa6-a
--- pa6-b
--- (split ({ < WI | A > C }) by (in-attrset?(URL(about-blank) | A)) = (true) and (in-attrset?(URL(about-blank) | A)) = (false) .)
--- (split ({ < WI | A > C }) by (in-attrset?(loading(true)    | A)) = (true) and (in-attrset?(loading(true)    | A)) = (false) .)
--- (split ({ < WI | loading(B:Bool), A > C}) by (B:Bool) = (true) and (B:Bool) = (false) .)
--- ---
--- (cases+ ({ C }) | (true) = (p(< WI |           toKernel(msg(PP1,NI?,MSG-FETCH-URL,U) @ T:MessageList), A > NWC,WIS,NIS,none)) on T:MessageList by (N:NonFetchMsgList) U (H:HasFetchMsgList) .)
--- ---
--- (split ({ C }) | (true) = (p(< WI |           toKernel(msg(PP1,NI?,MSG-FETCH-URL,U) @ T), A > NWC,WIS,NIS,none)) by (PP1 ~p WI)      = (true) and (PP1 ~p WI)      = (false) .)
--- (split ({ C }) | (true) = (p(< WI |           toKernel(msg(PP1,NI?,MSG-FETCH-URL,U)    ), A > NWC,WIS,NIS,none)) by (PP1 ~p WI)      = (true) and (PP1 ~p WI)      = (false) .)
--- ---
--- (split ({ C }) | (true) = (p(< WI | URL(OUT), toKernel(msg(PP1,NI?,MSG-FETCH-URL,U) @ T), A > NWC,WIS,NIS,none)) by (U ~l OUT)       = (true) and (U ~l OUT)       = (false) .)
--- (split ({ C }) | (true) = (p(< WI | URL(OUT), toKernel(msg(PP1,NI?,MSG-FETCH-URL,U)    ), A > NWC,WIS,NIS,none)) by (U ~l OUT)       = (true) and (U ~l OUT)       = (false) .)
--- ---
--- (split ({ C }) | (true) = (p(< WI |           toKernel(msg(PP1,NI?,MSG-FETCH-URL,U) @ T), A > NWC,WIS,NIS,none)) by (NI? ~p network) = (true) and (NI? ~p network) = (false) .)
--- (split ({ C }) | (true) = (p(< WI |           toKernel(msg(PP1,NI?,MSG-FETCH-URL,U)    ), A > NWC,WIS,NIS,none)) by (NI? ~p network) = (true) and (NI? ~p network) = (false) .)
--- ---
--- (auto .)

--- pa7
--- (split ({ C }) | (true) = (p(< NI | toKernel(msg(PP1,WI,MSG-RETURN-URL,U) @ T), A > NWC,WIS,NIS,none)) by (PP1 ~p NI) = (true) and (PP1 ~p NI) = (false) .)
--- (split ({ C }) | (true) = (p(< NI | toKernel(msg(PP1,WI,MSG-RETURN-URL,U)    ), A > NWC,WIS,NIS,none)) by (PP1 ~p NI) = (true) and (PP1 ~p NI) = (false) .)
--- (split ({ < kernel | handledCurrently(msg(NI,WI,MSG-RETURN-URL,U)), netlabels(pi(NI,IN,OUT),np NIS), A > C }) by (U ~l OUT) = (true) and (U ~l OUT) = (false) .)
--- (auto .)

--- fetch
--- (cases ({ < WI | toKernel(T:MessageList @ FM:FetchMsg), A > C }) on T:MessageList by (NFL:NonFetchMsgList) U (HFL:HasFetchMsgList) .)
--- (split ({ < WI | A > < kernel | weblabels(WIS), A' > C }) by (pid-in-weblabels?(WI,WIS)) = (false) and (pid-in-weblabels?(WI,WIS)) = (true) .)
--- (auto .)

--- new-url
(auto .)

--- kernelForwardsOpMessage
--- NOTE: nice way of handling requires extension of partially FVP theory
--- (cases ({ < NWI:ConcNetWebProcId | A  > C }) on NWI:ConcNetWebProcId by (WI) U (NI) .)
--- --- NetProc Case
--- --- Split on Message Type
--- (cases ({ < NI | fromKernel(F @ msg(PP1,NI,MT:MsgType,   U)), A > C }) on MT:MsgType by (MSG-FETCH-URL) U (N:NonFetchMsgType) .)
--- --- Setup Metadata/Process/Message Consistency
--- (split ({ < NI | fromKernel(F @ msg(PP1,NI,MSG-FETCH-URL,U)), A > < kernel | weblabels(WIS), A' > C }) by (weblabel-by-pid(PP1,WIS)) = (IN) and (weblabel-by-pid(PP1,WIS)) = (nolabel) .)
--- (split ({ < NI |                                              A > < kernel | netlabels(NIS), A' > C }) by (netlabelpair-by-pid(NI,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(NI,NIS)) = (nopair) .)
--- (split ({ < NI | fromKernel(F @ msg(PP1,NI,MSG-FETCH-URL,U)), A > < kernel | netlabels(pi(NI,IN,OUT),np NIS), A' > C }) by (U ~l OUT) = (true) and (U ~l OUT) = (false) .)
--- --- Ensure loading? flag is set
--- (split ({ < NI | A > < kernel | weblabels(pi(WI,IN),wp WIS), A' > C }) by (proc-loaded?(WI,C)) = (true) and (proc-loaded?(WI,C)) = (false) .)
--- --- WebProc Case
--- --- Split on Message Type
--- (cases ({ < WI | fromKernel(F @ msg(PP1,WI,MT:MsgType,    U)), A > C }) on MT:MsgType by (MSG-RETURN-URL) U (N:NonRetMsgType) .)
--- --- Setup Metadata/Process/Message Consistency
--- (split ({ < WI | fromKernel(F @ msg(PP1,WI,MSG-RETURN-URL,U)), A > < kernel | netlabels(NIS), A' > C }) by (netlabelpair-by-pid(PP1,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(PP1,NIS)) = (nopair) .)
--- (split ({ < WI |                                               A > < kernel | weblabels(WIS), A' > C }) by (weblabel-by-pid(WI,WIS)) = (IN) and (weblabel-by-pid(WI,WIS)) = (nolabel) .)
--- (split ({ < WI | fromKernel(F @ msg(PP1,WI,MSG-RETURN-URL,U)), A > < kernel | netlabels(pi(NI,IN,OUT),np NIS), A' > C }) by (U ~l OUT) = (true) and (U ~l OUT) = (false) .)
--- --- Ensure loading? flag is set
--- (split ({ < WI |             A > C }) by (in-attrset?(loading(true) | A)) = (true) and (in-attrset?(loading(true) | A)) = (false) .)
--- (split ({ < WI | loading(L), A > C }) by (in-attrset?(loading(true) | A)) = (true) and (in-attrset?(loading(true) | A)) = (false) .)
--- (split ({ < WI | loading(L), A > C }) by (L) = (true) and (L) = (false) .)
--- (split ({ < WI | A             > C }) by (in-conf?(WI,C)) = (true) and (in-conf?(WI,C)) = (false) .)
--- --- Link metadata pieces
--- (split ({ < kernel | weblabels(pi(WI,IN),wp WIS), netlabels(pi(NI,IN2,OUT),np NIS), A > C }) by (IN ~l IN2) = (true) and (IN ~l IN2) = (false) .)
--- ---
--- (auto .)

--- render
--- (split ({ < WI | A > < kernel | weblabels(WIS), A' > C }) by (weblabel-by-pid(WI,WIS)) = (IN) and (weblabel-by-pid(WI,WIS)) = (nolabel) .)
--- (split ({ C }) | (p(< WI | fromKernel(msg(PP1,WI,MSG-RETURN-URL,U) @ F), A > NWC,WIS,NIS,MSG?)) = (true) by (netlabelpair-by-pid(PP1,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(PP1,NIS)) = (nopair) .)
--- (split ({ C }) | (p(< WI | fromKernel(msg(PP1,WI,MSG-RETURN-URL,U)    ), A > NWC,WIS,NIS,MSG?)) = (true) by (netlabelpair-by-pid(PP1,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(PP1,NIS)) = (nopair) .)
--- (split ({ < kernel | weblabels(pi(WI,IN),wp WIS), netlabels(pi(NI,IN2,OUT),np NIS), A' > C }) by (IN ~l IN2) = (true) and (IN ~l IN2) = (false) .)
--- (split ({ < WI | rendered(U), A > < kernel | netlabels(pi(NI,IN,OUT),np NIS), A' > C }) by (U ~l OUT) = (true) and (U ~l OUT) = (false) .)
--- (auto .)

--- request-from-webapp
--- (split ({ < NI | A > < kernel | netlabels(NIS), A' > C }) by (netlabelpair-by-pid(NI,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(NI,NIS)) = (nopair) .)
--- (split ({ < NI | returnTo(PP1), A > < kernel | weblabels(WIS), A' > C }) by (weblabel-by-pid(PP1,WIS)) = (IN) and (weblabel-by-pid(PP1,WIS)) = (nolabel) .)
--- (split ({ < kernel | weblabels(pi(WI,IN),wp WIS), netlabels(pi(NI,IN2,OUT),np NIS), A > C }) by (IN ~l IN2) = (true) and (IN ~l IN2) = (false) .)
--- (split ({ < NI | out(LL ; U), A > < kernel | netlabels(pi(NI,IN,OUT),np NIS), A' > C }) by (U ~l OUT) = (true) and (U ~l OUT) = (false) .)
--- (split ({ < NI | returnTo(PP1), A > C }) by (proc-loaded?(PP1,C)) = (true) and (proc-loaded?(PP1,C)) = (false) .)
--- (auto .)

--- proc-in
--- (split ({ < NI |             A > < kernel | netlabels(NIS),                  A' > C }) by (netlabelpair-by-pid(NI,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(NI,NIS)) = (nopair) .)
--- (split ({ < NI |             A > < kernel | netlabels(NIS), weblabels(WIS),  A' > C }) by (proc-loaded-ind?(NI,NIS,WIS,C)) = (true) and (proc-loaded-ind?(NI,NIS,WIS,C)) = (false) .)
--- (split ({ < NI | in(LL ; U), A > < kernel | netlabels(pi(NI,IN,OUT),np NIS), A' > C }) by (U ~l OUT) = (true) and (U ~l OUT) = (false) .)
--- (auto .)

--- proc-out
--- (split ({ < NI | A > < kernel | netlabels(NIS), A' > C }) by (netlabelpair-by-pid(NI,NIS)) = ((IN,OUT)) and (netlabelpair-by-pid(NI,NIS)) = (nopair) .)
--- (split ({ < NI | A > < kernel | netlabels(NIS), weblabels(WIS), A' > C }) by (proc-loaded-ind?(NI,NIS,WIS,C)) = (true) and (proc-loaded-ind?(NI,NIS,WIS,C)) = (false) .)
--- (split ({ < NI | mem-out(U), A > < kernel | netlabels(pi(NI,IN,OUT),np NIS), A' > C }) by (U ~l OUT) = (true) and (U ~l OUT) = (false) .)
--- (auto .)
