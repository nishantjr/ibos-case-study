load ../../rltool-lib.maude

mod IBOS-ATTR-SPLIT is
  pr CONFLUENCE-TOOLS .

  var T L R V1 V2 : Term .
  var S   : String .
  var X Y : Qid .
  var V   : Variable .
  var C   : EqCondition .
  var Sts : CPStatus .
  var CP  : CritPair .
  var CPS : CritPairSet .
  var Sub : Substitution .
  var TL  : TermList .
  var U   : Module .

  --- find attribute terms in condition and split
  op attr-var-split  : Module CritPairSet -> CritPairSet .
  op attr-var-split1 : Module CritPair -> CritPair .
  -------------------------------------------
  eq attr-var-split (U,CP CPS) = attr-var-split1(U,CP) attr-var-split(U,CPS) .
  eq attr-var-split (U,(none).CritPairSet) = none .

 ceq attr-var-split1(U,ccp(S,X,Y,L,R,C,Sts)) =
   ccp(S,X,Y,L << (V <- V1),R << (V <- V1),C << (V <- V1),Sts)
   ccp(S,X,Y,L << (V <- V2),R << (V <- V2),C << (V <- V2),Sts)
  if V       := attr-var(U,flatten(C))
  /\ V1 | V2 := attr-var-split(V) .
  eq attr-var-split1(U,CP) = CP [owise] .

  op attr-var  : Module TermList ~> Variable .
  op attr-var1 : Term ~> Variable .
  ------------------------------------
  eq attr-var(U,(T,TL)) =
    if  (not T :: Variable) and-then
        sortLeq(U,leastSort(U,T),'Attribute) and-then
        attr-var1(T) :: Variable
      then attr-var1(T)
      else attr-var (U,(subterms(T),TL))
    fi .

  --- check type of variable
  eq attr-var1('URL[V])        = V .
  eq attr-var1('fromKernel[V]) = V .
  eq attr-var1('in[V])         = V .
  eq attr-var1('loading[V])    = V .
  eq attr-var1('mem-in[V])     = V .
  eq attr-var1('mem-out[V])    = V .
  eq attr-var1('out[V])        = V .
  eq attr-var1('rendered[V])   = V .
  --- NOTE: 2 Cases = V .
  eq attr-var1('returnTo[V])   = V .
  eq attr-var1('returnTo[V])   = V .
  eq attr-var1('toKernel[V])   = V .

  op attr-var-split : Variable -> TermSet .
  -----------------------------------------

  op flatten : EqCondition ~> TermList .
  --------------------------------------
  eq flatten(L = R /\ C) = L,R,flatten(C) .
  eq flatten(nil)        = empty .
endm

quit
