fmod CONG-CLOSURE-SHARED is
  pr PROCESS .
  pr CRITICAL-PAIR .

  var AS : AttrSet .
  var E : Equation .
  var ES : EquationSet .
  var T T' TES : Term .
  var U : Module .
  var MR : MRule .
  var P : Parent .
  var N : Nat .

  sort CCState .

  op rem-att : Nat EquationSet -> EquationSet .
  eq rem-att(N,ES) = rem-att(mr-att(N),ES) .

  op rem-att : AttrSet EquationSet -> EquationSet .
  eq rem-att(AS,(eq T = T' [AS] .) ES) = ES .
  eq rem-att(AS,ES) = ES [owise] .

  op reweqs : Module EquationSet Term -> Term .
  eq reweqs(U,ES,TES) = getTerm(metaReduce(addEqs(ES,addDecls(U,upModule('EQSET,true))),TES)) .

  op neweq : Module EquationSet MRule Parent -> Equation .
  eq neweq(U,ES,MR,P) = (eq left(simpl-mrule(U,ES,MR)) = right(simpl-mrule(U,ES,MR)) [mr-att(P)] .) .

  op mr-att : Parent -> AttrSet .
  eq mr-att(none) = none .
  eq mr-att(N) = metadata(string(N,10)) [owise] .

  op left-simplify : Module Equation EquationSet -> [EquationSet] .
  eq left-simplify(U,E,ES) = left-simplify(addEqs(E,U),ES) .

  op left-simplify : Module EquationSet -> [EquationSet] .
  eq left-simplify(U,eq T = T' [AS] . ES) =
    (eq getTerm(metaReduce(U,T)) = T' [AS] .)
    left-simplify(U,ES) .
  eq left-simplify(U,none) = none .
endfm
