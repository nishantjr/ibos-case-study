fmod A\/C-CONG-CLOSURE is
  pr CONG-CLOSURE-SHARED .

  op [_,_,_,_,_,_,_,_,_,_,_] : Module List{MRule<} List{IMRule} EquationSet IMRuleTable FAxiomSet List{OInfo<} Process Nat Nat Nat -> CCState .

  op init-ac-cc : Module List{MRule<} -> CCState .

  vars T T' : GroundTerm .  var ES : EquationSet .  var AS : AttrSet . var FAS : FAxiomSet . var OL : List{OInfo<} .
  var OI : OInfo . vars i j n m k l m0 : Nat .  vars S S' : SetM{Qid} .  var f : Qid . var IMRT : IMRuleTable . var P : Process .
  var MR : MRule .  var IMR : IMRule .  var ORG MRL : List{MRule<} . var IMRL : List{IMRule} . var RS : Results . var U : Module .

  eq init-ac-cc(U,MRL) = [U,MRL,nil,none,init-imrtab(U),init-faxset(U),nil,process-rules(MRL),0,0,1] .

  eq [U,ORG,IMRL,ES,IMRT,FAS,OL,MR MRL,m0,k,j] =
       if sm(U,ES,MR) == mt-mrule
          then [U,ORG,IMRL,ES,IMRT,FAS,OL,MRL,m0,k,j]
          else if ax top(left(sm(U,ES,MR))) in FAS == free
                 then [U,ORG,IMRL ([j] sm(U,ES,MR)),(eq left(sm(U,ES,MR)) = right(sm(U,ES,MR)) [meta(j)] .) ES,
                        IMRT,FAS,OL,ri(U,sm(U,ES,MR),IMRL) # MRL,m0,k,s(j)]
                 else [U,ORG,IMRL ([j] sm(U,ES,MR)),(eq left(sm(U,ES,MR)) = right(sm(U,ES,MR)) [meta(j)] .) ES,
                        add-imrule(top(left(sm(U,ES,MR))),([j] sm(U,ES,MR)),IMRT),
                        FAS,OL,ri(U,sm(U,ES,MR),IMRL) # MRL,m0,k,s(j)]
               fi
       fi .

  eq [U,ORG,IMRL,ES,IMRT,FAS,OL,{i} RS # MRL,m0,k,j] =
       [U,ORG,IMRL,ES,IMRT,FAS,OL,RS # MRL,m0,k,j] .

  eq [U,ORG,IMRL,ES,IMRT,FAS,OL,{f,[i] mt-mrule} RS # MRL,m0,k,j] =
       [U,ORG,remove(i,IMRL),rem-att(i,ES),remove([i,f],IMRT),FAS,OL, RS # MRL,m0,k,j] .

  eq [U,ORG,IMRL,ES,IMRT,FAS,OL,{f,[i] T [n,S] => T' [m,S']} RS # MRL,m0,k,j] =
       [U,ORG,remove(i,IMRL),rem-att(i,ES),remove([i,f],IMRT),FAS,OL,RS # ins(T [n,S] => T' [m,S'],MRL),m0,k,j] .

  eq [U,ORG,IMRL,ES,IMRT,FAS,nil,nil,m0,k,s(j)] =
       if m0 == j
          then [ES,k,rewWithEqs(U,ES,ORG)]
          else [U,ORG,IMRL,ES,IMRT,FAS,compute-overlaps(IMRT,m0),nil,j,s(k),s(j)]
       fi .

  eq [U,ORG,IMRL,ES,IMRT,FAS,OI OL,nil,m0,k,j] =
       [U,ORG,IMRL,ES,IMRT,FAS,OL,clean(sort(make-rule-map(U,CPS(U,OI,IMRT,FAS)))),m0,k,j] .
endfm
